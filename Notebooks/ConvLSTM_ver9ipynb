{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 70,
   "id": "1219eae6-c7d3-453c-8925-e2ed511e63ac",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install tensorflow"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "id": "0d22903a-5eb6-48f7-85f8-9332479f399c",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install matplotlib"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "id": "6f15ed81-6f0f-4954-a13f-47ef024e5591",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install climetlab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "id": "56485401-0398-43b4-b133-1495fa7822ad",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install climetlab-eumetnet-postprocessing-benchmark"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "id": "dd100e32-7cd9-4c03-964e-974215666ef5",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install --upgrade jupyterlab ipywidgets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "eb45c318-9b99-46c3-9a65-ba6264d18dcd",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install requests"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "id": "03f7cbe4-cabc-40ee-854e-d87d510609f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install tensorrt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "id": "f691ec5b-724d-46f2-811e-8e3b9b4cc16e",
   "metadata": {},
   "outputs": [],
   "source": [
    "#pip install plotly\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "eb70404a-1bf4-4ed7-813b-ce45b805a106",
   "metadata": {},
   "outputs": [],
   "source": [
    "#start"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "584532e8-ac47-49c1-8831-1c853f6e72a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "import requests\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "import tensorflow as tf\n",
    "import joblib  # For saving scaler model\n",
    "import os\n",
    "import pickle\n",
    "import plotly.graph_objects as go\n",
    "import pandas as pd\n",
    "import climetlab as cml\n",
    "\n",
    "from datetime import datetime\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import Dense, ConvLSTM2D, Flatten\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "from sklearn.metrics import mean_squared_error, mean_absolute_error\n",
    "from tensorflow.keras.models import Sequential\n",
    "from tensorflow.keras.layers import ConvLSTM2D, Flatten, Dense, Dropout, BatchNormalization, Input\n",
    "from tensorflow.keras.optimizers import Adam\n",
    "from tensorflow.keras.optimizers.schedules import ExponentialDecay\n",
    "from tensorflow.keras.regularizers import l2\n",
    "from keras.callbacks import ModelCheckpoint"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "3825d496-e436-498c-9b36-6c3ec0ac7c1e",
   "metadata": {},
   "outputs": [],
   "source": [
    "def fetch_data(start_date = '2018-01-01T00', end_date='2024-01-01T00'):\n",
    "    url_template = (\"https://dataset.api.hub.geosphere.at/v1/timeseries/historical/inca-v1-1h-1km?\"\n",
    "                    \"parameters=RR&parameters=GL&parameters=P0&parameters=T2M&parameters=TD2M&\"\n",
    "                    \"parameters=RH2M&parameters=UU&parameters=VV&start={start_date}%3A00&\"\n",
    "                    \"end={end_date}%3A00&lat_lon=48.333056%2C16.631944&\"\n",
    "                    \"lat_lon=48.115278%2C16.175833&output_format=geojson&\"\n",
    "                    \"filename=INCA_Vienna_timeseries_all_parameters_{start_year}_{end_year}\")\n",
    "    formatted_url = url_template.format(start_date=start_date, end_date=end_date, \n",
    "                                        start_year=start_date[:4], end_year=end_date[:4])\n",
    "    print(formatted_url)\n",
    "    response = requests.get(formatted_url)\n",
    "    if response.status_code == 200:\n",
    "        data = response.json()\n",
    "        print(\"Fetched data successfully\")\n",
    "    else:\n",
    "        print(\"Failed to retrieve data\", response.status_code)\n",
    "\n",
    "    # Processing the data\n",
    "    data_list = []\n",
    "    for feature in data['features']:\n",
    "        location = feature['geometry']['coordinates']\n",
    "        for i, timestamp in enumerate(data['timestamps']):\n",
    "            record = {\n",
    "                'time': pd.to_datetime(timestamp),\n",
    "                'longitude': location[0],\n",
    "                'latitude': location[1],\n",
    "                'RR': feature['properties']['parameters']['RR']['data'][i],\n",
    "                'T2M': feature['properties']['parameters']['T2M']['data'][i],\n",
    "                'RH2M': feature['properties']['parameters']['RH2M']['data'][i],\n",
    "                'TD2M': feature['properties']['parameters']['TD2M']['data'][i],\n",
    "                'GL': feature['properties']['parameters']['GL']['data'][i],\n",
    "                'UU': feature['properties']['parameters']['UU']['data'][i],\n",
    "                'VV': feature['properties']['parameters']['VV']['data'][i],\n",
    "                'P0': feature['properties']['parameters']['P0']['data'][i]\n",
    "            }\n",
    "            data_list.append(record)\n",
    "\n",
    "    original_df = pd.DataFrame(data_list)\n",
    "    return original_df\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "c708f75a-330b-4822-8f90-fd281f6862dc",
   "metadata": {},
   "outputs": [],
   "source": [
    "def calculate_rolling_features(df, window_size, feature_name):\n",
    "    if len(df) < window_size:\n",
    "        window_size = len(df)  # Adjust window size to length of the data if data is too short\n",
    "    df[f'{feature_name}_rolling_mean'] = df['T2M'].rolling(window=window_size).mean()\n",
    "    df[f'{feature_name}_rolling_max'] = df['T2M'].rolling(window=window_size).max()\n",
    "    df[f'{feature_name}_rolling_min'] = df['T2M'].rolling(window=window_size).min()\n",
    "    df[f'{feature_name}_rolling_std'] = df['T2M'].rolling(window=window_size).std()\n",
    "\n",
    "def calculate_ewm_features(df, span, feature_name):\n",
    "    df[f'{feature_name}_ewm'] = df['T2M'].ewm(span=span, adjust=False).mean()\n",
    "\n",
    "def handle_na(df):\n",
    "    df.fillna(method='ffill', inplace=True)  # Forward fill first to propagate last valid observation forward\n",
    "    df.fillna(method='bfill', inplace=True)  # Backward fill to ensure no NaNs remain\n",
    "\n",
    "def feature_engineering(df):\n",
    "    df.dropna(inplace=True)  # Drop rows with NaN values first\n",
    "    original_time_index = df['time'].copy()\n",
    "    # Basic date-time features\n",
    "    df['hour'] = df['time'].dt.hour\n",
    "    df['day_of_year'] = df['time'].dt.dayofyear\n",
    "    df['week_of_year'] = df['time'].dt.isocalendar().week\n",
    "    df['day_of_month'] = df['time'].dt.day\n",
    "    df['month'] = df['time'].dt.month\n",
    "    df['year'] = df['time'].dt.year\n",
    "\n",
    "    # Wind and interaction features\n",
    "    df['wind_speed'] = np.sqrt(df['UU']**2 + df['VV']**2)\n",
    "    df['wind_direction'] = np.arctan2(df['VV'], df['UU']) * 180 / np.pi\n",
    "    df['temp_humidity_interaction'] = df['T2M'] * df['RH2M']\n",
    "    df['wind_rain_interaction'] = df['wind_speed'] * df['RR']\n",
    "    df['RR_lag1'] = df['RR'].shift(1)\n",
    "    df['T2M_lag1'] = df['T2M'].shift(1)\n",
    "\n",
    "    # Cyclical time features\n",
    "    df['hour_sin'] = np.sin(2 * np.pi * df['hour']/24)\n",
    "    df['hour_cos'] = np.cos(2 * np.pi * df['hour']/24)\n",
    "    df['month_sin'] = np.sin(2 * np.pi * df['month'] / 12)\n",
    "    df['month_cos'] = np.cos(2 * np.pi * df['month'] / 12)\n",
    "    df['day_sin'] = np.sin(2 * np.pi * df['day_of_year']/365)\n",
    "    df['day_cos'] = np.cos(2 * np.pi * df['day_of_year']/365)\n",
    "\n",
    "    # Rolling and EWMA features\n",
    "    #calculate_rolling_features(df, 6, '6h')  # 24-hour window\n",
    "    #calculate_rolling_features(df, 12, '12h')  # 24-hour window\n",
    "    calculate_rolling_features(df, 24, '24h')  # 24-hour window\n",
    "    #calculate_rolling_features(df, 24*7, '7d')  # 7-day window\n",
    "    calculate_rolling_features(df, 24*365, '365d')  # 7-day window\n",
    "    #calculate_ewm_features(df, 6, '6h')  # EWMA for 24 hours\n",
    "    #calculate_ewm_features(df, 12, '12h')  # EWMA for 24 hours\n",
    "    calculate_ewm_features(df, 24, '24h')  # EWMA for 24 hours\n",
    "    #calculate_ewm_features(df, 24*7, '7d')  # EWMA for 7 days\n",
    "    calculate_ewm_features(df, 24*365, '365d')  # EWMA for 7 days\n",
    "\n",
    "    # Handle NaNs intelligently\n",
    "    handle_na(df)\n",
    "\n",
    "    # Ensure only numeric types are used for modeling\n",
    "    df = df.select_dtypes(include=[np.number])\n",
    "    \n",
    "    return df, original_time_index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "b78ca322-076a-49b2-bb1e-ed75d37c080f",
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_data_for_convlstm(start_date, end_date):\n",
    "    df, time_index = feature_engineering(fetch_data(start_date, end_date).copy())\n",
    "    return df, time_index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "33de8ac6-739d-454a-85ef-eefcf61e8cae",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://dataset.api.hub.geosphere.at/v1/timeseries/historical/inca-v1-1h-1km?parameters=RR&parameters=GL&parameters=P0&parameters=T2M&parameters=TD2M&parameters=RH2M&parameters=UU&parameters=VV&start=2018-01-01T00%3A00&end=2024-01-01T00%3A00&lat_lon=48.333056%2C16.631944&lat_lon=48.115278%2C16.175833&output_format=geojson&filename=INCA_Vienna_timeseries_all_parameters_2018_2024_0101\n",
      "Fetched data successfully\n"
     ]
    }
   ],
   "source": [
    "preprocessed_df = fetch_data()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "b9364e51-0e92-4bb4-8c96-2de32b0d8cf9",
   "metadata": {},
   "outputs": [],
   "source": [
    "preprocessed_df_copy = preprocessed_df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "20e65929-7e15-4656-9326-0d465ac52526",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24710/935309804.py:13: FutureWarning:\n",
      "\n",
      "DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "\n",
      "/tmp/ipykernel_24710/935309804.py:14: FutureWarning:\n",
      "\n",
      "DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "feature_df, time_index  = feature_engineering(preprocessed_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "1bf7490f-f695-437d-95d4-5dd78fa91314",
   "metadata": {},
   "outputs": [],
   "source": [
    "feature_df_copy = feature_df.copy()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "19329503-b686-4b7a-b214-4379df73eee6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>longitude</th>\n",
       "      <th>latitude</th>\n",
       "      <th>RR</th>\n",
       "      <th>T2M</th>\n",
       "      <th>RH2M</th>\n",
       "      <th>TD2M</th>\n",
       "      <th>GL</th>\n",
       "      <th>UU</th>\n",
       "      <th>VV</th>\n",
       "      <th>P0</th>\n",
       "      <th>...</th>\n",
       "      <th>24h_rolling_mean</th>\n",
       "      <th>24h_rolling_max</th>\n",
       "      <th>24h_rolling_min</th>\n",
       "      <th>24h_rolling_std</th>\n",
       "      <th>365d_rolling_mean</th>\n",
       "      <th>365d_rolling_max</th>\n",
       "      <th>365d_rolling_min</th>\n",
       "      <th>365d_rolling_std</th>\n",
       "      <th>24h_ewm</th>\n",
       "      <th>365d_ewm</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>16.638773</td>\n",
       "      <td>48.334339</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.68</td>\n",
       "      <td>94.58</td>\n",
       "      <td>0.91</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-1.08</td>\n",
       "      <td>1.06</td>\n",
       "      <td>101026.92</td>\n",
       "      <td>...</td>\n",
       "      <td>3.458333</td>\n",
       "      <td>7.97</td>\n",
       "      <td>0.40</td>\n",
       "      <td>2.713545</td>\n",
       "      <td>12.067063</td>\n",
       "      <td>34.98</td>\n",
       "      <td>-13.05</td>\n",
       "      <td>9.608740</td>\n",
       "      <td>1.680000</td>\n",
       "      <td>1.680000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>16.638773</td>\n",
       "      <td>48.334339</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.17</td>\n",
       "      <td>96.23</td>\n",
       "      <td>0.64</td>\n",
       "      <td>0.0</td>\n",
       "      <td>-2.09</td>\n",
       "      <td>0.80</td>\n",
       "      <td>100967.53</td>\n",
       "      <td>...</td>\n",
       "      <td>3.458333</td>\n",
       "      <td>7.97</td>\n",
       "      <td>0.40</td>\n",
       "      <td>2.713545</td>\n",
       "      <td>12.067063</td>\n",
       "      <td>34.98</td>\n",
       "      <td>-13.05</td>\n",
       "      <td>9.608740</td>\n",
       "      <td>1.639200</td>\n",
       "      <td>1.679884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>16.638773</td>\n",
       "      <td>48.334339</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.40</td>\n",
       "      <td>99.42</td>\n",
       "      <td>0.32</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.27</td>\n",
       "      <td>0.29</td>\n",
       "      <td>100957.14</td>\n",
       "      <td>...</td>\n",
       "      <td>3.458333</td>\n",
       "      <td>7.97</td>\n",
       "      <td>0.40</td>\n",
       "      <td>2.713545</td>\n",
       "      <td>12.067063</td>\n",
       "      <td>34.98</td>\n",
       "      <td>-13.05</td>\n",
       "      <td>9.608740</td>\n",
       "      <td>1.540064</td>\n",
       "      <td>1.679591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>16.638773</td>\n",
       "      <td>48.334339</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.51</td>\n",
       "      <td>100.00</td>\n",
       "      <td>0.51</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.61</td>\n",
       "      <td>0.21</td>\n",
       "      <td>100949.28</td>\n",
       "      <td>...</td>\n",
       "      <td>3.458333</td>\n",
       "      <td>7.97</td>\n",
       "      <td>0.40</td>\n",
       "      <td>2.713545</td>\n",
       "      <td>12.067063</td>\n",
       "      <td>34.98</td>\n",
       "      <td>-13.05</td>\n",
       "      <td>9.608740</td>\n",
       "      <td>1.457659</td>\n",
       "      <td>1.679324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>16.638773</td>\n",
       "      <td>48.334339</td>\n",
       "      <td>0.000</td>\n",
       "      <td>0.49</td>\n",
       "      <td>100.00</td>\n",
       "      <td>0.49</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.76</td>\n",
       "      <td>0.43</td>\n",
       "      <td>100939.71</td>\n",
       "      <td>...</td>\n",
       "      <td>3.458333</td>\n",
       "      <td>7.97</td>\n",
       "      <td>0.40</td>\n",
       "      <td>2.713545</td>\n",
       "      <td>12.067063</td>\n",
       "      <td>34.98</td>\n",
       "      <td>-13.05</td>\n",
       "      <td>9.608740</td>\n",
       "      <td>1.380246</td>\n",
       "      <td>1.679053</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105165</th>\n",
       "      <td>16.181034</td>\n",
       "      <td>48.112373</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2.26</td>\n",
       "      <td>86.19</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.19</td>\n",
       "      <td>0.19</td>\n",
       "      <td>100935.99</td>\n",
       "      <td>...</td>\n",
       "      <td>1.450000</td>\n",
       "      <td>3.45</td>\n",
       "      <td>-0.91</td>\n",
       "      <td>1.274571</td>\n",
       "      <td>11.459591</td>\n",
       "      <td>33.79</td>\n",
       "      <td>-10.14</td>\n",
       "      <td>8.366507</td>\n",
       "      <td>2.314958</td>\n",
       "      <td>11.471637</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105166</th>\n",
       "      <td>16.181034</td>\n",
       "      <td>48.112373</td>\n",
       "      <td>0.000</td>\n",
       "      <td>2.51</td>\n",
       "      <td>82.91</td>\n",
       "      <td>-0.09</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.08</td>\n",
       "      <td>0.49</td>\n",
       "      <td>100932.03</td>\n",
       "      <td>...</td>\n",
       "      <td>1.420417</td>\n",
       "      <td>3.45</td>\n",
       "      <td>-0.91</td>\n",
       "      <td>1.239458</td>\n",
       "      <td>11.459307</td>\n",
       "      <td>33.79</td>\n",
       "      <td>-10.14</td>\n",
       "      <td>8.366769</td>\n",
       "      <td>2.330561</td>\n",
       "      <td>11.469591</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105167</th>\n",
       "      <td>16.181034</td>\n",
       "      <td>48.112373</td>\n",
       "      <td>0.000</td>\n",
       "      <td>1.84</td>\n",
       "      <td>84.37</td>\n",
       "      <td>-0.51</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.20</td>\n",
       "      <td>0.17</td>\n",
       "      <td>101026.68</td>\n",
       "      <td>...</td>\n",
       "      <td>1.353333</td>\n",
       "      <td>3.12</td>\n",
       "      <td>-0.91</td>\n",
       "      <td>1.166241</td>\n",
       "      <td>11.458772</td>\n",
       "      <td>33.79</td>\n",
       "      <td>-10.14</td>\n",
       "      <td>8.367234</td>\n",
       "      <td>2.291316</td>\n",
       "      <td>11.467392</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105168</th>\n",
       "      <td>16.181034</td>\n",
       "      <td>48.112373</td>\n",
       "      <td>0.000</td>\n",
       "      <td>4.47</td>\n",
       "      <td>78.51</td>\n",
       "      <td>1.07</td>\n",
       "      <td>0.0</td>\n",
       "      <td>4.03</td>\n",
       "      <td>1.66</td>\n",
       "      <td>100941.54</td>\n",
       "      <td>...</td>\n",
       "      <td>1.409583</td>\n",
       "      <td>4.47</td>\n",
       "      <td>-0.91</td>\n",
       "      <td>1.281970</td>\n",
       "      <td>11.458508</td>\n",
       "      <td>33.79</td>\n",
       "      <td>-10.14</td>\n",
       "      <td>8.367418</td>\n",
       "      <td>2.465611</td>\n",
       "      <td>11.465795</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>105169</th>\n",
       "      <td>16.181034</td>\n",
       "      <td>48.112373</td>\n",
       "      <td>0.002</td>\n",
       "      <td>4.82</td>\n",
       "      <td>82.31</td>\n",
       "      <td>2.06</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.68</td>\n",
       "      <td>0.81</td>\n",
       "      <td>101031.94</td>\n",
       "      <td>...</td>\n",
       "      <td>1.500833</td>\n",
       "      <td>4.82</td>\n",
       "      <td>-0.91</td>\n",
       "      <td>1.440727</td>\n",
       "      <td>11.458150</td>\n",
       "      <td>33.79</td>\n",
       "      <td>-10.14</td>\n",
       "      <td>8.367635</td>\n",
       "      <td>2.653962</td>\n",
       "      <td>11.464278</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>105110 rows × 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        longitude   latitude     RR   T2M    RH2M  TD2M   GL    UU    VV  \\\n",
       "0       16.638773  48.334339  0.000  1.68   94.58  0.91  0.0 -1.08  1.06   \n",
       "1       16.638773  48.334339  0.000  1.17   96.23  0.64  0.0 -2.09  0.80   \n",
       "2       16.638773  48.334339  0.000  0.40   99.42  0.32  0.0  0.27  0.29   \n",
       "3       16.638773  48.334339  0.000  0.51  100.00  0.51  0.0  0.61  0.21   \n",
       "4       16.638773  48.334339  0.000  0.49  100.00  0.49  0.0  0.76  0.43   \n",
       "...           ...        ...    ...   ...     ...   ...  ...   ...   ...   \n",
       "105165  16.181034  48.112373  0.000  2.26   86.19  0.20  0.0  0.19  0.19   \n",
       "105166  16.181034  48.112373  0.000  2.51   82.91 -0.09  0.0  1.08  0.49   \n",
       "105167  16.181034  48.112373  0.000  1.84   84.37 -0.51  0.0  0.20  0.17   \n",
       "105168  16.181034  48.112373  0.000  4.47   78.51  1.07  0.0  4.03  1.66   \n",
       "105169  16.181034  48.112373  0.002  4.82   82.31  2.06  0.0  1.68  0.81   \n",
       "\n",
       "               P0  ...  24h_rolling_mean  24h_rolling_max  24h_rolling_min  \\\n",
       "0       101026.92  ...          3.458333             7.97             0.40   \n",
       "1       100967.53  ...          3.458333             7.97             0.40   \n",
       "2       100957.14  ...          3.458333             7.97             0.40   \n",
       "3       100949.28  ...          3.458333             7.97             0.40   \n",
       "4       100939.71  ...          3.458333             7.97             0.40   \n",
       "...           ...  ...               ...              ...              ...   \n",
       "105165  100935.99  ...          1.450000             3.45            -0.91   \n",
       "105166  100932.03  ...          1.420417             3.45            -0.91   \n",
       "105167  101026.68  ...          1.353333             3.12            -0.91   \n",
       "105168  100941.54  ...          1.409583             4.47            -0.91   \n",
       "105169  101031.94  ...          1.500833             4.82            -0.91   \n",
       "\n",
       "        24h_rolling_std  365d_rolling_mean  365d_rolling_max  \\\n",
       "0              2.713545          12.067063             34.98   \n",
       "1              2.713545          12.067063             34.98   \n",
       "2              2.713545          12.067063             34.98   \n",
       "3              2.713545          12.067063             34.98   \n",
       "4              2.713545          12.067063             34.98   \n",
       "...                 ...                ...               ...   \n",
       "105165         1.274571          11.459591             33.79   \n",
       "105166         1.239458          11.459307             33.79   \n",
       "105167         1.166241          11.458772             33.79   \n",
       "105168         1.281970          11.458508             33.79   \n",
       "105169         1.440727          11.458150             33.79   \n",
       "\n",
       "        365d_rolling_min  365d_rolling_std   24h_ewm   365d_ewm  \n",
       "0                 -13.05          9.608740  1.680000   1.680000  \n",
       "1                 -13.05          9.608740  1.639200   1.679884  \n",
       "2                 -13.05          9.608740  1.540064   1.679591  \n",
       "3                 -13.05          9.608740  1.457659   1.679324  \n",
       "4                 -13.05          9.608740  1.380246   1.679053  \n",
       "...                  ...               ...       ...        ...  \n",
       "105165            -10.14          8.366507  2.314958  11.471637  \n",
       "105166            -10.14          8.366769  2.330561  11.469591  \n",
       "105167            -10.14          8.367234  2.291316  11.467392  \n",
       "105168            -10.14          8.367418  2.465611  11.465795  \n",
       "105169            -10.14          8.367635  2.653962  11.464278  \n",
       "\n",
       "[105110 rows x 38 columns]"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = feature_df.copy()\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "11c7a31d-cd26-41fe-949c-e610e106b082",
   "metadata": {},
   "outputs": [],
   "source": [
    "\n",
    "def create_sequences(input_data, param, sequence_length, feature_count, hours_to_predict, include_target=True):\n",
    "    X, y = [], []\n",
    "    for i in range(len(input_data) - sequence_length - hours_to_predict + 1):  # Adjusted for 24 hours ahead\n",
    "        X.append(input_data.iloc[i:(i + sequence_length)].values)\n",
    "        if include_target:\n",
    "            y.append(input_data.iloc[i + sequence_length:i + sequence_length + hours_to_predict][param].values)  # 24 hours target\n",
    "    if include_target:\n",
    "        return np.array(X), np.array(y)\n",
    "    else:\n",
    "        return np.array(X)  # Return only X if include_target is False\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "2409900e-fc5c-41a5-ae49-bcb9525e08c0",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Number of features: 38\n"
     ]
    }
   ],
   "source": [
    "param = 'T2M'\n",
    "sequence_length = 24\n",
    "feature_count = df.shape[1]\n",
    "hours_to_predict = 6\n",
    "print(\"Number of features:\", feature_count)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "5c16ebb7-6274-4a16-8716-d2485463b8ee",
   "metadata": {},
   "outputs": [],
   "source": [
    "scaler = MinMaxScaler()\n",
    "\n",
    "df_scaled = scaler.fit_transform(df)\n",
    "df_scaled = pd.DataFrame(df_scaled, columns=df.columns)\n",
    "\n",
    "validation_split=0.2\n",
    "train_idx = int(len(df_scaled) * (1 - validation_split))\n",
    "\n",
    "train_df = df_scaled.iloc[:train_idx]\n",
    "test_df = df_scaled.iloc[train_idx:]\n",
    "\n",
    "X_train, y_train = create_sequences(train_df, param, sequence_length, feature_count, hours_to_predict)\n",
    "X_test, y_test = create_sequences(test_df, param, sequence_length, feature_count, hours_to_predict)\n",
    "\n",
    "#X_test = X_test.reshape((X_test.shape[0], sequence_length, 1, 1, X_train.shape[2]))\n",
    "#y_test = y_test\n",
    "\n",
    "# Reshape for ConvLSTM\n",
    "X_train = X_train.reshape((X_train.shape[0], sequence_length, 1, 1, X_train.shape[2]))\n",
    "X_test = X_test.reshape((X_test.shape[0], sequence_length, 1, 1, X_test.shape[2]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "4560eae7-9b7c-49fe-83d8-13feb6bde721",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/yjess/anaconda3/lib/python3.11/site-packages/keras/src/layers/rnn/rnn.py:204: UserWarning:\n",
      "\n",
      "Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
      "\n"
     ]
    }
   ],
   "source": [
    "model = Sequential([\n",
    "            ConvLSTM2D(filters=64, kernel_size=(1, 1), activation='relu',\n",
    "                       input_shape=(sequence_length, 1, 1, feature_count), return_sequences=True),\n",
    "            ConvLSTM2D(filters=32, kernel_size=(1, 1), activation='relu', return_sequences=False),\n",
    "            Flatten(),\n",
    "            Dense(50, activation='relu'),\n",
    "            Dense(hours_to_predict)\n",
    "        ])\n",
    "optimizer = Adam(learning_rate=0.001, clipvalue=1.0)\n",
    "model.compile(optimizer=optimizer, loss='mse')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "c49ff5fe-8f80-45c6-8bdf-f0b88ee1e12e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "208fcd6f-bb70-4939-921b-11c8d28afc3b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/2\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2024-04-29 19:34:06.231407: W external/local_tsl/tsl/framework/cpu_allocator_impl.cc:83] Allocation of 306647232 exceeds 10% of free system memory.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m2627/2627\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 28ms/step - loss: 0.0090\n",
      "Epoch 1: val_loss improved from inf to 0.00093, saving model to checkpoints/model_epoch_01_val_loss_0.00.weights.h5\n",
      "\u001b[1m2627/2627\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m87s\u001b[0m 31ms/step - loss: 0.0090 - val_loss: 9.2865e-04\n",
      "Epoch 2/2\n",
      "\u001b[1m2626/2627\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 26ms/step - loss: 9.6909e-04\n",
      "Epoch 2: val_loss improved from 0.00093 to 0.00076, saving model to checkpoints/model_epoch_02_val_loss_0.00.weights.h5\n",
      "\u001b[1m2627/2627\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m72s\u001b[0m 27ms/step - loss: 9.6905e-04 - val_loss: 7.6267e-04\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<keras.src.callbacks.history.History at 0x7f3f16111e10>"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "epochs=2\n",
    "batch_size=32\n",
    "\n",
    "checkpoint_path = \"checkpoints/model_epoch_{epoch:02d}_val_loss_{val_loss:.2f}.weights.h5\"\n",
    "checkpoint = ModelCheckpoint(\n",
    "    filepath=checkpoint_path, save_weights_only=True,\n",
    "    monitor='val_loss', mode='min', save_best_only=True, verbose=1\n",
    ")\n",
    "\n",
    "model.fit(X_train, y_train, epochs=epochs, batch_size=batch_size,\n",
    "           validation_data=(X_test, y_test), callbacks=[checkpoint])\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "d991b927-8fb7-4d39-acec-a7885ac32675",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\u001b[1m657/657\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m5s\u001b[0m 7ms/step\n",
      "MSE  0.0007118634403096269 RMSE  0.02668076911015923 MAE  0.018556644499533693\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABdAAAAJOCAYAAAC3ACUsAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjguMCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy81sbWrAAAACXBIWXMAAA9hAAAPYQGoP6dpAAEAAElEQVR4nOzdd5xU1fn48c8tU7ezsLD0ZgERFI2iRtEYY1TURBI1ptiSrynfn9HEGFPVxMQY06wxydcajWn2XhA7FkQQBJS2wC67bJ/d6bec3x93d9hhe1/geb9esDP3nnvumdnZ3TPPPPc5mlJKIYQQQgghhBBCCCGEEEKILPpwD0AIIYQQQgghhBBCCCGEGIkkgC6EEEIIIYQQQgghhBBCdEAC6EIIIYQQQgghhBBCCCFEBySALoQQQgghhBBCCCGEEEJ0QALoQgghhBBCCCGEEEIIIUQHJIAuhBBCCCGEEEIIIYQQQnRAAuhCCCGEEEIIIYQQQgghRAckgC6EEEIIIYQQQgghhBBCdEAC6EIIIYQQQgghhBBCCCFEBySALsQe6p577kHTtMy/YDDIuHHjOOGEE7j++uuprq7uc99r167lmmuuoaysrN/ja9vHBRdcwNSpU/vcZ0eOP/54jj/++E73r1q1Ck3TuOqqqzpts2HDBjRN49JLLwVg6tSpXHDBBQM6zsFUX1/PueeeS0lJCZqm8bnPfa7Ttscff3zW6yYUCjFv3jz+9Kc/4bruoI/15ZdfRtM0Xn755cy2vr4ubr/9du65555228vKytA0rcN9As466yw0TeN///d/+9zHm2++yTXXXENjY+PADawLmqZxzTXXDMm5hBBCCDG4dn8fY5omEydO5MILL6SiomJIxrD7fL+jOWpPdDUn6u59yt7g8ccfR9M0iouLSaVSfeojHo9zzTXX9Pq576vBeE8qhNj7SQBdiD3c3XffzbJly3jhhRe47bbbOOSQQ7jhhhuYNWsWL774Yp/6XLt2Lddee22/AuinnXYay5Yto7S0tM99DIR58+Zx2GGHcd999+E4Todt7r77bgAuvvhiAB555BF+9rOfDdkY++uXv/wljzzyCH/84x9ZtmwZv/3tb7tsP336dJYtW8ayZcv417/+xYQJE7j88sv50Y9+NEQjzvazn/2MRx55pNfHdRZALy0tZdmyZZx22mkDMLq9S3V1NU8++SQADzzwAMlksk/9vPnmm1x77bVDFkAXQgghxN6n7fuYb3zjGzz44IMce+yxxGKxIR/L/PnzWbZsGfPnz+/VcV3NiW6//XZuv/32ARrhyHTnnXcCXkLPo48+2qc+4vE411577ZAF0IUQoi8kgC7EHm7OnDksWLCAY489lsWLF/PHP/6RDz74gJycHM466yx27tw5LOMaM2YMCxYsIBAIDMv527r44ouprKzkmWeeabfPcRzuu+8+DjvsMObNmwfAoYceyowZM4Z6mH22Zs0aZsyYwZe//GUWLFjA/vvv32X7UCjEggULWLBgAWeccQaPPfYY06dP59Zbb8WyrA6PUUqRSCQGY/jMmDGDQw89dMD6CwQCLFiwgDFjxgxYn3uL++67D8uyOO2002hsbOThhx8e7iEJIYQQYh/V+j7mhBNO4Oqrr+bKK69ky5YtXQZi4/H4oIwlPz+fBQsWkJ+fP2B9zp49m9mzZw9YfyNNVVUVTz/9NJ/61KcIBoOZYLoQQuyNJIAuxF5o8uTJ/P73v6e5uZm//OUvWfuWL1/OGWecwahRowgGgxx66KH8+9//zuy/5557+OIXvwjACSeckLm0sjXT94UXXuDMM89k4sSJBINBZs6cySWXXEJtbW3WeToq4dIRpRS33347hxxyCKFQiKKiIr7whS+wefPmdu1++9vfMmXKFILBIPPnz+8wIN6R8847j1AolMk0b+v555+noqKCiy66KLOtoxIuTU1NXHHFFUybNg2/38+ECRO47LLLsjJkvvjFL3LQQQdlHXf66aejaRr/+c9/MttWrFiBpmk88cQTXY67vr6eb3/720yYMAG/38/06dP5yU9+krk8srVUyYsvvsi6desy36veZm/4fD4OO+ww4vE4NTU1AJkSH3fccQezZs0iEAhw7733Al7Jm/POO4+SkhICgQCzZs3itttua9fv+vXr+exnP0s4HGb06NF885vfpLm5uV27ji6jdF2XW265JfO6KCwsZMGCBTz++OOA9z368MMPeeWVVzKPu7WPzkq4vP7665x44onk5eURDoc5+uijeeqpp7LatL5uly5dyre+9S1Gjx5NcXExZ511Fjt27Mhq+9JLL3H88cdTXFxMKBRi8uTJLF68uMs3dp/73OeYMmVKh+VyjjzyyKysp//85z8ceeSRFBQUEA6HmT59etbrtC/uuusuxo4dy7333ksoFOKuu+7qsN3bb7/N6aefTnFxMcFgkBkzZnDZZZcBcM011/CDH/wAgGnTprV73XVWbmX3n6uamhq+/e1vM3v2bHJzcykpKeFTn/oUr732Wr8eoxBCCCH2TAsWLABg69atgDdHzM3NZfXq1XzmM58hLy+PE088EYB0Os11113HgQceSCAQYMyYMVx44YWZuWwry7K48sorGTduHOFwmE9+8pO888477c7dWQmX/syJOirh0t38vlXrXPzvf/87s2bNIhwOM2/evMyVhJ2pqanB7/d3eDXt+vXr0TSNm2++GfA+jGh9fxMMBhk1ahSHH344Dz74YJfnaHXvvfdi2zaXX345Z511FkuWLMl879pqbGzk+9//PtOnTycQCFBSUsKpp57K+vXrKSsryyS9XHvttZnnsHXO2Fm5lWuuuQZN07K23XbbbRx33HGUlJSQk5PDwQcfzG9/+9tOE4SEEKI3zOEegBBicJx66qkYhsGrr76a2bZ06VI++9nPcuSRR3LHHXdQUFDAP//5T8455xzi8TgXXHABp512Gr/+9a/58Y9/zG233ZYJ6LVmZG/atImjjjqKr3/96xQUFFBWVsYf/vAHPvnJT7J69Wp8Pl+vxnnJJZdwzz33cOmll3LDDTdQX1/PL37xC44++mhWrVrF2LFjAW9Cde2113LxxRfzhS98ge3bt/ONb3wDx3E44IADujxHQUEBixcv5l//+hc1NTVZmcl33303wWCQ8847r9Pj4/E4CxcupLy8nB//+MfMnTuXDz/8kJ///OesXr2aF198EU3T+PSnP81///tfKisrKS0txbZtXnnlFUKhEC+88ELmg4kXX3wR0zS7rImYTCY54YQT2LRpE9deey1z587ltdde4/rrr2flypU89dRTmVIl3/72t4lEIjzwwAMAfcp02bRpE6ZpUlRUlNn26KOP8tprr/Hzn/+ccePGUVJSwtq1azn66KMzH9KMGzeO5557jksvvZTa2lquvvpqAHbu3MnChQvx+XzcfvvtjB07lgceeKDHdbcvuOAC7r//fi6++GJ+8Ytf4Pf7WbFiReYDmUceeYQvfOELFBQUZC6N7epqh1deeYWTTjqJuXPncueddxIIBLj99ts5/fTTefDBBznnnHOy2n/961/ntNNO4x//+Afbt2/nBz/4AV/5yld46aWXAC9If9ppp3Hsscdy1113UVhYSEVFBc8++yzpdJpwONzhOC666CLOPPNMXnrpJT796U9ntq9fv5533nkn84Zm2bJlnHPOOZxzzjlcc801BINBtm7dmjl/X7z55pusW7eOH/zgBxQXF7N48WIeeOABtmzZwrRp0zLtnnvuOU4//XRmzZrFH/7wByZPnkxZWRnPP/985rmpr6/nlltu4eGHH86Uaert666+vh6Aq6++mnHjxhGNRnnkkUc4/vjjWbJkyV5fM1QIIYQQ2TZu3AiQNVdPp9OcccYZXHLJJVx11VXYto3rupx55pm89tprXHnllRx99NFs3bqVq6++muOPP57ly5cTCoUA+MY3vsF9993HFVdcwUknncSaNWs466yzOkzq2N1Az4l6Mr9v66mnnuLdd9/lF7/4Bbm5ufz2t7/l85//PB999BHTp0/v8Bxjxoxh0aJF3HvvvVx77bXo+q6cybvvvhu/38+Xv/xlAL73ve/x97//neuuu45DDz2UWCzGmjVrqKur6/a5AS8xo7S0lFNOOYVQKMQ//vEP7rnnnsz7AYDm5mY++clPUlZWxg9/+EOOPPJIotEor776KpWVlRx99NE8++yzfPazn+Xiiy/m61//euZx9NamTZs477zzMglPq1at4le/+hXr16/vNGlECCF6TAkh9kh33323AtS7777baZuxY8eqWbNmZe4feOCB6tBDD1WWZWW1W7RokSotLVWO4yillPrPf/6jALV06dIux+C6rrIsS23dulUB6rHHHms3vi1btmS2nX/++WrKlCmZ+8uWLVOA+v3vf5/V7/bt21UoFFJXXnmlUkqphoYGFQwG1ec///msdm+88YYC1MKFC7scp1JKLV26VAHqD3/4Q2ZbXV2dCgQC6stf/nJW2ylTpqjzzz8/c//6669Xuq63e67/+9//KkA9/fTTSimlNm7cqAB13333KaWUev311xWgrrzySjVt2rTMcSeddJI6+uijuxzvHXfcoQD173//O2v7DTfcoAD1/PPPZ7YtXLhQHXTQQd0+B23bWpalLMtSO3bsUFdddZUC1Be/+MVMO0AVFBSo+vr6rONPPvlkNXHiRBWJRLK2/+///q8KBoOZ9j/84Q+Vpmlq5cqVWe1OOumkdq+t3V8Xr776qgLUT37yky4fy0EHHdTh937Lli0KUHfffXdm24IFC1RJSYlqbm7ObLNtW82ZM0dNnDhRua6rlNr1uv32t7+d1edvf/tbBajKykql1K7v/e6PrzuWZamxY8eq8847L2v7lVdeqfx+v6qtrVVKKfW73/1OAaqxsbFX/XfloosuUoBat26dUmrXz8TPfvazrHYzZsxQM2bMUIlEotO+brzxxnY/360AdfXVV7fbvvvP1e5s21aWZakTTzyx3c96Z30KIYQQYs/TOt966623lGVZqrm5WT355JNqzJgxKi8vT1VVVSmlvDkioO66666s4x988EEFqIceeihr+7vvvqsAdfvttyullFq3bp0C1OWXX57V7oEHHlBA1rykdV7Udo7a3znRwoULs+aqvZnfA2rs2LGqqakps62qqkrpuq6uv/76TsejlFKPP/54u/5s21bjx49XixcvzmybM2eO+tznPtdlX51pna9fddVVSinvfeG0adPUlClTMvNqpZT6xS9+oQD1wgsvdNpXTU1Np3O93d8ntLr66qtVV+Esx3GUZVnqvvvuU4ZhZL2n6axPIYToipRwEWIvppTK3N64cSPr16/PZBzYtp35d+qpp1JZWclHH33UbZ/V1dV885vfZNKkSZimic/nY8qUKQCsW7euV+N78skn0TSNr3zlK1njGTduHPPmzctc/rhs2TKSyWRm7K2OPvrozLm7s3DhQmbMmJFVxuWBBx4glUp1WxbjySefZM6cORxyyCFZ4zz55JOzLtOcMWMGU6dOzSze+sILL3DwwQfzla98hS1btrBp0yZSqRSvv/56VvZxR1566SVycnL4whe+kLW99XLGJUuW9Ohxd+TDDz/E5/Ph8/kYP348v//97/nyl7/M3/72t6x2n/rUp7Iy0pPJJEuWLOHzn/884XC43WsomUzy1ltvAd7VDgcddFCmrnyrrjL9W7WW5vnOd77T58fYViwW4+233+YLX/gCubm5me2GYfDVr36V8vLydq/9M844I+v+3LlzgV2XFB9yyCH4/X7+53/+h3vvvbddyaHOmKbJV77yFR5++GEikQjg1eH/+9//zplnnklxcTEAn/jEJwA4++yz+fe//01FRUUfHvku0WiUf//73xx99NEceOCBwK6fiXvuuSdTUubjjz9m06ZNXHzxxQSDwX6dsyfuuOMO5s+fTzAYzPw+WbJkSa9/lwghhBBiz7NgwQJ8Ph95eXksWrSIcePG8cwzz2SuQG21ePHirPtPPvkkhYWFnH766Vnz0UMOOYRx48Zl5uZLly4FaPce4uyzz8Y0u74YfzDmRL2d359wwgnk5eVl7o8dO5aSkpIOy6S0dcoppzBu3Lis9z3PPfccO3bsyHrfc8QRR/DMM89w1VVX8fLLL/dqvaPWeuet/bWWXdm6dWvW43jmmWfYf//9u33vMxDef/99zjjjDIqLizEMA5/Px9e+9jUcx+Hjjz8e9PMLIfZuEkAXYi8Vi8Woq6tj/PjxAJnFRK+44opM8LT137e//W2AdnXMd+e6Lp/5zGd4+OGHufLKK1myZAnvvPNOJmja20Umd+7ciVKKsWPHthvTW2+9lRlP62WE48aNa9dHR9s6omkaF110EatXr2b58uWAdxnjtGnTOOGEE7od5wcffNBujHl5eSilsp63E088MTNpfPHFFznppJM4+OCDGTt2LC+++CJvvPEGiUSi20lkXV0d48aNa1fbr6SkBNM0e3xpZUdmzJjBu+++y/Lly1mzZg2NjY3cf//9FBQUZLVrvQy17Zhs2+aWW25p91yceuqpAFnfs75+v2pqajAMo8ff2+40NDSglGr3eIDMz8fuz2drILtVa3mY1tf4jBkzePHFFykpKeE73/kOM2bMYMaMGdx0003djueiiy4imUzyz3/+E/De0FRWVnLhhRdm2hx33HE8+uij2LbN1772NSZOnMicOXN6XJNyd//617+IRqOcffbZNDY20tjYSCQS4eyzz2b79u288MILAJm6oRMnTuzTeXrjD3/4A9/61rc48sgjeeihh3jrrbd49913+exnPztoC9YKIYQQYuS47777ePfdd3n//ffZsWMHH3zwAcccc0xWm3A43G5hz507d9LY2Ijf7283J62qqur2PYRpmu3mersbjDlRb+f3HY0xEAh0O08yTZOvfvWrPPLIIzQ2NgLeOj+lpaWcfPLJmXY333wzP/zhD3n00Uc54YQTGDVqFJ/73OfYsGFDl/03Nzfzn//8hyOOOIIxY8Zk5paf//zn0TQtazHRmpqaIZlXbtu2jWOPPZaKigpuuukmXnvtNd59993MOk0ytxRC9JfUQBdiL/XUU0/hOE6mjvDo0aMB+NGPfsRZZ53V4THd1RJfs2YNq1at4p577uH888/PbG+tV9hbo0ePRtM0XnvttQ7rV7dua508VlVVtWtTVVXV4cIyHbngggv4+c9/zl133YXP5+P999/nl7/8ZbtJbEfj7GrBxdbnFrwA+p133sk777zD22+/zU9/+lPAy+Z+4YUX2Lp1K7m5uZlFkjpTXFzM22+/jVIqa3zV1dXYtp11zt4KBoMcfvjh3bbb/XkpKirKZG13lh3eWku7uLi40+9Xd8aMGYPjOFRVVXUY9O6toqIidF2nsrKy3b7WhUH78nwee+yxHHvssTiOw/Lly7nlllu47LLLGDt2LOeee26nx82ePZsjjjiCu+++m0suuYS7776b8ePH85nPfCar3ZlnnsmZZ55JKpXirbfe4vrrr+e8885j6tSpHHXUUb0aa+sbmcsuuyyz8NXu+08++eRMvcny8vJe9d9WIBBotxAWtP+Q4v777+f444/nz3/+c9b2ntQkFUIIIcSeb9asWd3OSTuap7cu8v7ss892eExr1nbb9xATJkzI7Ldtu9tklIGYE+1uMOf3u7vwwgu58cYbM+tdPf7441x22WUYhpFpk5OTk1lnaufOnZls9NNPP53169d32veDDz5IPB7nnXfeybpatdUjjzxCQ0MDRUVFjBkzpl/PYTAY7HBeuXvi16OPPkosFuPhhx/OukJ55cqVfT63EEK0JRnoQuyFtm3bxhVXXEFBQQGXXHIJ4AXH99tvP1atWsXhhx/e4b/Wyebu2batWid6uwe7//KXv/RpnIsWLUIpRUVFRYfjOfjggwHv8s5gMJhZJLPVm2++2e0ljG2NHz+ez372szz44IPcdttt6Lqe9UFAV+PctGkTxcXFHY6zbQD/xBNPRNM0fvazn6HrOscddxwAn/70p1m6dCkvvPACxx13XLeLrZ544olEo1EeffTRrO333XdfZv9QC4fDnHDCCbz//vvMnTu3w+ei9Y3KCSecwIcffsiqVauy+vjHP/7R7XlOOeUUgHaB1d31JAMHvDcHRx55JA8//HBWe9d1uf/++5k4cSL7779/t/10xjAMjjzyyEyGy4oVK7o95sILL+Ttt9/m9ddf54knnuD888/PekPTViAQYOHChdxwww2Ad3lqb6xbt45ly5axePFili5d2u7fiSeeyGOPPUZdXR37778/M2bM4K677urwzUrbMUHH2TxTp07lgw8+yNr20ksvEY1Gs7Zpmtbud8kHH3zAsmXLevX4hBBCCLFvWbRoEXV1dTiO0+F8tDUpqDWRaPf3EP/+97+xbbvLcwzEnGh3Qzm/nzVrFkceeSR33303//jHP0ilUllXO+5u7NixXHDBBXzpS1/io48+Ih6Pd9r2zjvvJC8vjyVLlrSbV954442kUqnMc37KKafw8ccf89JLL3XaX3fzyurq6szV1OAtLPvcc89ltevofapSql2JSiGE6CvJQBdiD7dmzZpM3b/q6mpee+017r77bgzD4JFHHslawfwvf/kLp5xyCieffDIXXHABEyZMoL6+nnXr1rFixQr+85//ADBnzhwA/vrXv5KXl0cwGGTatGkceOCBzJgxg6uuugqlFKNGjeKJJ57IlH/orWOOOYb/+Z//4cILL2T58uUcd9xx5OTkUFlZyeuvv87BBx/Mt771LYqKirjiiiu47rrr+PrXv84Xv/hFtm/fzjXXXNPrMh8XX3wxTz31FP/3f//HySefzKRJk7o95rLLLuOhhx7iuOOO4/LLL2fu3Lm4rsu2bdt4/vnn+f73v8+RRx4JeJdgzpkzh+eff54TTjiBcDgMeAH0+vp66uvr+cMf/tDtOb/2ta9x2223cf7551NWVsbBBx/M66+/zq9//WtOPfXUIakj2JGbbrqJT37ykxx77LF861vfYurUqTQ3N7Nx40aeeOKJzOT4sssu46677uK0007juuuuY+zYsTzwwANdZrO0OvbYY/nqV7/Kddddx86dO1m0aBGBQID333+fcDjM//t//w+Agw8+mH/+85/861//Yvr06QSDwcyHLru7/vrrOemkkzjhhBO44oor8Pv93H777axZs4YHH3yw26sQdnfHHXfw0ksvcdpppzF58mSSyWTmCoWefG++9KUv8b3vfY8vfelLpFKpTO3LVj//+c8pLy/nxBNPZOLEiTQ2NnLTTTfh8/lYuHBhpp1pmixcuLDLmvit2edXXnklRxxxRLv9zc3NLFmyhPvvv5/vfve73HbbbZx++uksWLCAyy+/nMmTJ7Nt2zaee+65zJuh1uf5pptu4vzzz8fn83HAAQeQl5fHV7/6VX72s5/x85//nIULF7J27VpuvfXWdiWCFi1axC9/+UuuvvpqFi5cyEcffcQvfvELpk2b1u2bWiGEEELsu84991weeOABTj31VL773e9yxBFH4PP5KC8vZ+nSpZx55pl8/vOfZ9asWXzlK1/hT3/6Ez6fj09/+tOsWbOG3/3ud+3KwnSk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rrdv37544YUXUFVVFUrSNxQHERERERERERERUWtgCZdT1Lhx4zBy5EhcdNFF+O9//4u8vDysXbsW99xzD7755hsAwPz587F06VIsXboU27dvx4IFC/D999/Xu06r1Yrbb78df/jDH/Cvf/0Lu3btwpdffoklS5YAAJKTk2Gz2fDhhx/i559/RmlpsM77woUL8dBDD+Gpp57C9u3bsWXLFixbtgxPPPEEAOCyyy6DLMuYPXs2tm3bhvfffx+PPfZYG+8hIiIiIiIiIiIiOtUxgX6KkiQJ77//Ps466yxcc8016NmzJ2bMmIG8vDykpKQAAKZPn457770Xt99+O4YNG4a9e/c2OnDnH//4R/z+97/Hvffeiz59+mD69OkoKCgAAKiqiqeffhrPPfcc0tPTMWXKFADAb37zG/zzn//E888/jwEDBmDMmDF4/vnn0a1bNwCA0+nEu+++i23btmHIkCG4++678cgjj7Th3iEiIiIiIiIiIiICJHGKFZguKyuD2+1GaWkpYmJiwpZ5vV7s2bMH3bp1g9VqjVCE1Fp4PImIiCiaNHQdeqrhviAiIiKi9tbSa1D2QCciIiIiIiIiIiIiqgMT6EREREREREREREREdWACnYiIiIiIiIiIiIioDkygExERERERERERERHVgQl0IiIiIiIiIiIiIqI6MIFeByFEpEOgVsDjSERERERERERERCeDCfTjmEwmAEBlZWWEI6HWUHMca44rERERERERERERUXOokQ4gmiiKgtjYWBQUFAAA7HY7JEmKcFTUXEIIVFZWoqCgALGxsVAUJdIhERERERERERERUQfEBPoJUlNTASCURKeOKzY2NnQ8iYiIiIiIiIiIiJqLCfQTSJKEtLQ0JCcnIxAIRDocaiGTycSe50RERERERERERHRSmECvh6IoTMASERERERERERERncI4iCgRERERERERERERUR2YQCciIiIiIiIiIiIiqgMT6EREREREREREREREdTjlaqALIQAAZWVlEY6EiIiIiE4lNdefNdejpzJekxMRERFRe2vp9fgpl0AvLy8HAHTp0iXCkRARERHRqai8vBxutzvSYUQUr8mJiIiIKFKaez0uiVOsC4xhGDh06BBcLhckSWrXbZeVlaFLly7Yv38/YmJi2nXbFMRjEB14HCKPxyDyeAwij8cgOpxKx0EIgfLycqSnp0OWT+1KipG8Jj+VnUqfN2pdPHeopXjuUEvwvKGWauzcaen1+CnXA12WZWRmZkY0hpiYGP4CiDAeg+jA4xB5PAaRx2MQeTwG0eFUOQ6nes/zGtFwTX4qO1U+b9T6eO5QS/HcoZbgeUMt1dC505Lr8VO76wsRERERERERERERUT2YQCciIiIiIiIiIiIiqgMT6O3IYrFgwYIFsFgskQ7llMVjEB14HCKPxyDyeAwij8cgOvA4ELUfft6opXjuUEvx3KGW4HlDLdVW584pN4goEREREREREREREVFTsAc6EREREREREREREVEdmEAnIiIiIiIiIiIiIqoDE+hERERERERERERERHVgAr2dLF68GN26dYPVasWwYcOwZs2aSIfUITz00EP4xS9+AZfLheTkZFx00UX46aefwtoIIbBw4UKkp6fDZrPh7LPPxvfffx/Wxufz4cYbb0RiYiIcDgcuvPBCHDhwIKxNcXExrrzySrjdbrjdblx55ZUoKSkJa7Nv3z5ccMEFcDgcSExMxLx58+D3+9vkvUerhx56CJIk4aabbgrN4zFoHwcPHsQVV1yBhIQE2O12DB48GBs2bAgt53FoW5qm4Z577kG3bt1gs9mQk5OD+++/H4ZhhNrwGLSu1atX44ILLkB6ejokScJbb70Vtjza9veWLVswZswY2Gw2ZGRk4P7770dnGGqmoeMQCARw++23Y8CAAXA4HEhPT8dVV12FQ4cOha2Dx4Go/TTnvuONN97Aeeedh6SkJMTExGDkyJH473//247RUjRp6T3rF198AVVVMXjw4LYNkKJSc88bn8+Hu+++G1lZWbBYLOjevTuWLl3aTtFSNGnuufPiiy9i0KBBsNvtSEtLw9VXX42jR4+2U7QULRq7R6zLqlWrMGzYMFitVuTk5OBvf/tb8zcsqM29/PLLwmQyiX/84x9i27ZtYv78+cLhcIi9e/dGOrSoN2HCBLFs2TKxdetWsXnzZjFp0iTRtWtXUVFREWrz8MMPC5fLJV5//XWxZcsWMX36dJGWlibKyspCbebMmSMyMjLEypUrxcaNG8U555wjBg0aJDRNC7WZOHGi6N+/v1i7dq1Yu3at6N+/v5g8eXJouaZpon///uKcc84RGzduFCtXrhTp6eli7ty57bMzosD69etFdna2GDhwoJg/f35oPo9B2ysqKhJZWVli1qxZ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aNHc86a8vFxkZmaKadOmie+//16sWrVK9OjRQ/zmN7+J1FugCGnuubNs2TKhqqpYvHix2LVrl/j888/F8OHDxWmnnRapt0AR0tg94onnzu7du4Xdbhc333yz2LZtm1iyZIkwmUzitddea9Z2mUBvJ88884zIysoSZrNZDB06VKxatSrSIXUIAOr8WbZsWaiNYRhiwYIFIjU1VVgsFnHWWWeJLVu2hK2nqqpKzJ07V8THxwubzSYmT54s9u3bF9bm6NGj4vLLLxcul0u4XC5x+eWXi+Li4rA2e/fuFZMmTRI2m03Ex8eLuXPnCq/X21ZvP2qdmEDnMWgf7777rujfv7+wWCyid+/e4u9//3vYch6HtlVWVibmz58vunbtKqxWq8jJyRF33313WJKQx6B1/e9//6vzb8DMmTOFENG3v7/77jtx5plnCovFIlJTU8XChQuFYRitvl/aW0PHYc+ePfX+rf7f//4XWgePA1H7aei+Y+bMmWLMmDGh6TFjxjT4e5ZOLc05d07EBPqpq7nnzQ8//CDGjRsnbDabyMzMFLfccktYBzk6dTT33Hn66adF3759hc1mE2lpaeLyyy8XBw4caOeoKdIau0es69z57LPPxJAhQ4TZbBbZ2dni2WefbfZ2JSH4XQciIiIiIiIiIiIiohOxBjoRERERERERERERUR2YQCciIiIiIiIiIiIiqgMT6EREREREREREREREdWACnYiIiIiIiIiIiIioDkygExERERERERERERHVgQl0IiIiIiIiIiIiIqI6MIFORERERERERERERFQHJtCJiIiIiIiIiIiIiOrABDoREYVZuHAhBg8eHOkwiIiIiIhOeZIk4a233mrTbZx99tm46aab2nQbREQdGRPoRESnEEmSGvyZNWsWbr31VnzyySeRDpWIiIiIqN2sXbsWiqJg4sSJzX5tdnY2Fi1a1PpBNeKCCy7AuHHj6ly2bt06SJKEjRs3tnNURESdDxPoRESnkPz8/NDPokWLEBMTEzbvqaeegtPpREJCQqRDJSIiIiJqN0uXLsWNN96Izz//HPv27Yt0OE0ye/ZsfPrpp9i7d2+tZUuXLsXgwYMxdOjQCERGRNS5MIFORHQKSU1NDf243W5IklRr3oklXGbNmoWLLroIf/rTn5CSkoLY2Fjcd9990DQNt912G+Lj45GZmYmlS5eGbevgwYOYPn064uLikJCQgClTpiAvL6993zARERERUSM8Hg9eeeUV/O53v8PkyZPx/PPP12rzzjvvYPjw4bBarUhMTMTUqVMBBMuf7N27FzfffHPoW51A3WURFy1ahOzs7ND0119/jfPOOw+JiYlwu90YM2ZMs3qMT548GcnJybXiraysxIoVKzB79mwcPXoUl156KTIzM2G32zFgwAAsX768wfXWVTYmNjY2bDuNXet/9tlnOO200+BwOBAbG4tRo0bVmegnIuoImEAnIqJGffrppzh06BBWr16NJ554AgsXLsTkyZMRFxeHr776CnPmzMGcOXOwf/9+AMGL9nPOOQdOpxOrV6/G559/DqfTiYkTJ8Lv90f43RARERERHbNixQr06tULvXr1whVXXIFly5ZBCBFa/p///AdTp07FpEmTsGnTJnzyyScYPnw4AOCNN95AZmYm7r///tC3OpuqvLwcM2fOxJo1a/Dll1+iR48eOP/881FeXt6k16uqiquuugrPP/98WLyvvvoq/H4/Lr/8cni9XgwbNgzvvfcetm7dimuvvRZXXnklvvrqqybHeaLGrvU1TcNFF12EMWPG4LvvvsO6detw7bXXhh4uEBF1NGqkAyAiougXHx+Pp59+GrIso1evXvjzn/+MyspK3HXXXQCAO++8Ew8//DC++OILzJgxAy+//DJkWcY///nP0IXysmXLEBsbi88++wzjx4+P5NshIiIiIgpZsmQJrrjiCgDAxIkTUVFRgU8++SRUX/zBBx/EjBkzcN9994VeM2jQIADB62RFUeByuZCamtqs7Z577rlh08899xzi4uKwatUqTJ48uUnruOaaa/Doo4/is88+wznnnAMgWL5l6tSpiIuLQ1xcHG699dZQ+xtvvBEffvghXn31VZx++unNirdGY9f6w4cPR2lpKSZPnozu3bsDAPr06dOibRERRQP2QCciokb169cPsnzsT0ZKSgoGDBgQmlYUBQkJCSgoKAAAbNiwATt37oTL5YLT6YTT6UR8fDy8Xi927drV7vETEREREdXlp59+wvr16zFjxgwAwV7d06dPDytPuHnzZowdO7bVt11QUIA5c+agZ8+ecLvdcLvdqKioaFYN9t69e+OMM84Ixbtr1y6sWbMG11xzDQBA13U8+OCDGDhwIBISEuB0OvHRRx+dVJ33xq714+PjMWvWLEyYMAEXXHABnnrqqWb1zCciijbsgU5ERI0ymUxh05Ik1TnPMAwAgGEYGDZsGF588cVa60pKSmq7QImIiIiImmHJkiXQNA0ZGRmheUIImEwmFBcXIy4uDjabrdnrlWU5rKwKAAQCgbDpWbNmobCwEIsWLUJWVhYsFgtGjhzZ7JKHs2fPxty5c/HMM89g2bJlyMrKCiX8H3/8cTz55JNYtGgRBgwYAIfDgZtuuqnBbUiS1GDsTbnWX7ZsGebNm4cPP/wQK1aswD333IOVK1dixIgRzXpvRETRgD3QiYio1Q0dOhQ7duxAcnIycnNzw37cbnekwyMiIiIigqZp+Ne//oXHH38cmzdvDv18++23yMrKCiWIBw4ciE8++aTe9ZjNZui6HjYvKSkJhw8fDktEb968OazNmjVrMG/ePJx//vno168fLBYLjhw50uz3cckll0BRFLz00kv4v//7P1x99dWh0ipr1qzBlClTcMUVV2DQoEHIycnBjh07GlxfUlJSWI/xHTt2oLKyMjTd1Gv9IUOG4M4778TatWvRv39/vPTSS81+b0RE0YAJdCIianWXX345EhMTMWXKFKxZswZ79uzBqlWrMH/+fBw4cCDS4RERERER4b333kNxcTFmz56N/v37h/1MmzYNS5YsAQAsWLAAy5cvx4IFC/DDDz9gy5Yt+POf/xxaT3Z2NlavXo2DBw+GEuBnn302CgsL8ec//xm7du3CM888gw8++CBs+7m5uXjhhRfwww8/4KuvvsLll1/eot7uTqcT06dPx1133YVDhw5h1qxZYdtYuXIl1q5dix9++AHXXXcdDh8+3OD6zj33XPz1r3/Fxo0b8c0332DOnDlh3z5t7Fp/z549uPPOO7Fu3Trs3bsXH330EbZv38466ETUYTGBTkRErc5ut2P16tXo2rUrpk6dij59+uCaa65BVVUVYmJiIh0eERERERGWLFmCcePG1fkNyYsvvhibN2/Gxo0bcfbZZ+PVV1/FO++8g8GDB+Pcc8/FV199FWp7//33Iy8vD927dw+VMOnTpw8WL16MZ555BoMGDcL69evDBvMEgoN9FhcXY8iQIbjyyisxb948JCcnt+i9zJ49G8XFxRg3bhy6du0amv/HP/4RQ4cOxYQJE3D22WcjNTUVF110UYPrevzxx9GlSxecddZZuOyyy3DrrbfCbreHljd2rW+32/Hjjz/i4osvRs+ePXHttddi7ty5uO6661r03oiIIk0SJxa2IiIiIiIiIiIiIiIi9kAnIiIiIiIiIiIiIqoLE+hERERERERERERERHVgAp2IiIiIiIiIiIiIqA5MoBMRERERERERERER1YEJdCIiIiIiIiIiIiKiOjCBTkRERERERERERERUBybQiYiIiIiIiIiIiIjqwAQ6EREREREREREREVEdmEAnIiIiIiIiIiIiIqoDE+hERERERERERERERHVgAp2IiIiIiIiIiIiIqA5MoBMRERERERERERER1eH/AxUALxoNdz5GAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1500x600 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "y_pred = model.predict(X_test).flatten()\n",
    "y_test = y_test.flatten()  # Ensure y_test is flat if it's not already\n",
    "dummy_array = np.zeros((y_pred.shape[0], feature_count))\n",
    "dummy_array[:, 3] = y_pred.squeeze() \n",
    "test_dummy_array = np.zeros((y_test.shape[0], feature_count))\n",
    "test_dummy_array[:, 3] = y_test.squeeze()  \n",
    "test_y = scaler.inverse_transform(test_dummy_array)[:, 3]\n",
    "predictions_y = scaler.inverse_transform(dummy_array)[:, 3]\n",
    "\n",
    "mse = mean_squared_error(y_test, y_pred)\n",
    "rmse = np.sqrt(mse)\n",
    "mae = mean_absolute_error(y_test, y_pred)\n",
    "print(\"MSE \", mse, \"RMSE \", rmse, \"MAE \", mae)\n",
    "\n",
    "plt.figure(figsize=(15, 6))\n",
    "plt.subplot(1, 2, 1)\n",
    "plt.plot(y_test, label='Actual', linestyle='-')\n",
    "plt.plot(y_pred, label='Predicted', linestyle='--')\n",
    "plt.title('Detailed View of Predictions vs. Actual')\n",
    "plt.xlabel('Time')\n",
    "plt.ylabel('Value')\n",
    "plt.legend()\n",
    "\n",
    "\n",
    "# Scatter plot of the actual vs predicted\n",
    "plt.subplot(1, 2, 2)\n",
    "plt.scatter(y_test, y_pred, alpha=0.6)\n",
    "plt.title('Prediction vs Actual')\n",
    "plt.xlabel('Actual Values')\n",
    "plt.ylabel('Predicted Values')\n",
    "plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], 'r--')  # Ideal predictions line\n",
    "\n",
    "plt.tight_layout()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "83a260de-0dba-4256-b97f-bd68e62cf970",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "694ecd54-9718-4693-b321-81badd93a877",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "https://dataset.api.hub.geosphere.at/v1/timeseries/historical/inca-v1-1h-1km?parameters=RR&parameters=GL&parameters=P0&parameters=T2M&parameters=TD2M&parameters=RH2M&parameters=UU&parameters=VV&start=2024-04-20T00%3A00&end=2024-04-28T08%3A00&lat_lon=48.333056%2C16.631944&lat_lon=48.115278%2C16.175833&output_format=geojson&filename=INCA_Vienna_timeseries_all_parameters_2024_2024_0101\n",
      "Fetched data successfully\n",
      "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 19ms/step\n",
      "https://dataset.api.hub.geosphere.at/v1/timeseries/historical/inca-v1-1h-1km?parameters=RR&parameters=GL&parameters=P0&parameters=T2M&parameters=TD2M&parameters=RH2M&parameters=UU&parameters=VV&start=2024-04-28T08%3A00&end=2024-04-29T00%3A00&lat_lon=48.333056%2C16.631944&lat_lon=48.115278%2C16.175833&output_format=geojson&filename=INCA_Vienna_timeseries_all_parameters_2024_2024_0101\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24710/421820632.py:13: FutureWarning:\n",
      "\n",
      "DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "\n",
      "/tmp/ipykernel_24710/421820632.py:14: FutureWarning:\n",
      "\n",
      "DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Fetched data successfully\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_24710/421820632.py:13: FutureWarning:\n",
      "\n",
      "DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "\n",
      "/tmp/ipykernel_24710/421820632.py:14: FutureWarning:\n",
      "\n",
      "DataFrame.fillna with 'method' is deprecated and will raise in a future version. Use obj.ffill() or obj.bfill() instead.\n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.plotly.v1+json": {
       "config": {
        "plotlyServerURL": "https://plot.ly"
       },
       "data": [
        {
         "line": {
          "color": "blue"
         },
         "mode": "lines",
         "name": "Original T2M",
         "type": "scatter",
         "x": [
          "2024-04-20T00:00:00+00:00",
          "2024-04-20T01:00:00+00:00",
          "2024-04-20T02:00:00+00:00",
          "2024-04-20T03:00:00+00:00",
          "2024-04-20T04:00:00+00:00",
          "2024-04-20T05:00:00+00:00",
          "2024-04-20T06:00:00+00:00",
          "2024-04-20T07:00:00+00:00",
          "2024-04-20T08:00:00+00:00",
          "2024-04-20T09:00:00+00:00",
          "2024-04-20T10:00:00+00:00",
          "2024-04-20T11:00:00+00:00",
          "2024-04-20T13:00:00+00:00",
          "2024-04-20T14:00:00+00:00",
          "2024-04-20T15:00:00+00:00",
          "2024-04-20T16:00:00+00:00",
          "2024-04-20T17:00:00+00:00",
          "2024-04-20T18:00:00+00:00",
          "2024-04-20T19:00:00+00:00",
          "2024-04-20T20:00:00+00:00",
          "2024-04-20T21:00:00+00:00",
          "2024-04-20T22:00:00+00:00",
          "2024-04-20T23:00:00+00:00",
          "2024-04-21T00:00:00+00:00",
          "2024-04-21T01:00:00+00:00",
          "2024-04-21T02:00:00+00:00",
          "2024-04-21T03:00:00+00:00",
          "2024-04-21T04:00:00+00:00",
          "2024-04-21T05:00:00+00:00",
          "2024-04-21T06:00:00+00:00",
          "2024-04-21T07:00:00+00:00",
          "2024-04-21T08:00:00+00:00",
          "2024-04-21T09:00:00+00:00",
          "2024-04-21T10:00:00+00:00",
          "2024-04-21T11:00:00+00:00",
          "2024-04-21T12:00:00+00:00",
          "2024-04-21T13:00:00+00:00",
          "2024-04-21T14:00:00+00:00",
          "2024-04-21T15:00:00+00:00",
          "2024-04-21T16:00:00+00:00",
          "2024-04-21T17:00:00+00:00",
          "2024-04-21T18:00:00+00:00",
          "2024-04-21T19:00:00+00:00",
          "2024-04-21T20:00:00+00:00",
          "2024-04-21T21:00:00+00:00",
          "2024-04-21T22:00:00+00:00",
          "2024-04-21T23:00:00+00:00",
          "2024-04-22T00:00:00+00:00",
          "2024-04-22T01:00:00+00:00",
          "2024-04-22T02:00:00+00:00",
          "2024-04-22T03:00:00+00:00",
          "2024-04-22T04:00:00+00:00",
          "2024-04-22T05:00:00+00:00",
          "2024-04-22T06:00:00+00:00",
          "2024-04-22T07:00:00+00:00",
          "2024-04-22T08:00:00+00:00",
          "2024-04-22T09:00:00+00:00",
          "2024-04-22T10:00:00+00:00",
          "2024-04-22T11:00:00+00:00",
          "2024-04-22T12:00:00+00:00",
          "2024-04-22T13:00:00+00:00",
          "2024-04-22T14:00:00+00:00",
          "2024-04-22T15:00:00+00:00",
          "2024-04-22T16:00:00+00:00",
          "2024-04-22T17:00:00+00:00",
          "2024-04-22T18:00:00+00:00",
          "2024-04-22T19:00:00+00:00",
          "2024-04-22T20:00:00+00:00",
          "2024-04-22T21:00:00+00:00",
          "2024-04-22T22:00:00+00:00",
          "2024-04-22T23:00:00+00:00",
          "2024-04-23T00:00:00+00:00",
          "2024-04-23T01:00:00+00:00",
          "2024-04-23T02:00:00+00:00",
          "2024-04-23T03:00:00+00:00",
          "2024-04-23T04:00:00+00:00",
          "2024-04-23T05:00:00+00:00",
          "2024-04-23T06:00:00+00:00",
          "2024-04-23T07:00:00+00:00",
          "2024-04-23T08:00:00+00:00",
          "2024-04-23T09:00:00+00:00",
          "2024-04-23T10:00:00+00:00",
          "2024-04-23T11:00:00+00:00",
          "2024-04-23T12:00:00+00:00",
          "2024-04-23T13:00:00+00:00",
          "2024-04-23T14:00:00+00:00",
          "2024-04-23T15:00:00+00:00",
          "2024-04-23T16:00:00+00:00",
          "2024-04-23T17:00:00+00:00",
          "2024-04-23T18:00:00+00:00",
          "2024-04-23T19:00:00+00:00",
          "2024-04-23T20:00:00+00:00",
          "2024-04-23T21:00:00+00:00",
          "2024-04-23T22:00:00+00:00",
          "2024-04-23T23:00:00+00:00",
          "2024-04-24T00:00:00+00:00",
          "2024-04-24T01:00:00+00:00",
          "2024-04-24T02:00:00+00:00",
          "2024-04-24T03:00:00+00:00",
          "2024-04-24T04:00:00+00:00",
          "2024-04-24T05:00:00+00:00",
          "2024-04-24T06:00:00+00:00",
          "2024-04-24T07:00:00+00:00",
          "2024-04-24T08:00:00+00:00",
          "2024-04-24T09:00:00+00:00",
          "2024-04-24T10:00:00+00:00",
          "2024-04-24T11:00:00+00:00",
          "2024-04-24T12:00:00+00:00",
          "2024-04-24T13:00:00+00:00",
          "2024-04-24T14:00:00+00:00",
          "2024-04-24T15:00:00+00:00",
          "2024-04-24T16:00:00+00:00",
          "2024-04-24T17:00:00+00:00",
          "2024-04-24T18:00:00+00:00",
          "2024-04-24T19:00:00+00:00",
          "2024-04-24T20:00:00+00:00",
          "2024-04-24T21:00:00+00:00",
          "2024-04-24T22:00:00+00:00",
          "2024-04-24T23:00:00+00:00",
          "2024-04-25T00:00:00+00:00",
          "2024-04-25T01:00:00+00:00",
          "2024-04-25T02:00:00+00:00",
          "2024-04-25T03:00:00+00:00",
          "2024-04-25T04:00:00+00:00",
          "2024-04-25T05:00:00+00:00",
          "2024-04-25T06:00:00+00:00",
          "2024-04-25T07:00:00+00:00",
          "2024-04-25T08:00:00+00:00",
          "2024-04-25T09:00:00+00:00",
          "2024-04-25T10:00:00+00:00",
          "2024-04-25T11:00:00+00:00",
          "2024-04-25T12:00:00+00:00",
          "2024-04-25T13:00:00+00:00",
          "2024-04-25T14:00:00+00:00",
          "2024-04-25T15:00:00+00:00",
          "2024-04-25T16:00:00+00:00",
          "2024-04-25T17:00:00+00:00",
          "2024-04-25T18:00:00+00:00",
          "2024-04-25T19:00:00+00:00",
          "2024-04-25T20:00:00+00:00",
          "2024-04-25T21:00:00+00:00",
          "2024-04-25T22:00:00+00:00",
          "2024-04-25T23:00:00+00:00",
          "2024-04-26T00:00:00+00:00",
          "2024-04-26T01:00:00+00:00",
          "2024-04-26T02:00:00+00:00",
          "2024-04-26T03:00:00+00:00",
          "2024-04-26T04:00:00+00:00",
          "2024-04-26T05:00:00+00:00",
          "2024-04-26T06:00:00+00:00",
          "2024-04-26T07:00:00+00:00",
          "2024-04-26T08:00:00+00:00",
          "2024-04-26T09:00:00+00:00",
          "2024-04-26T10:00:00+00:00",
          "2024-04-26T11:00:00+00:00",
          "2024-04-26T12:00:00+00:00",
          "2024-04-26T13:00:00+00:00",
          "2024-04-26T14:00:00+00:00",
          "2024-04-26T15:00:00+00:00",
          "2024-04-26T16:00:00+00:00",
          "2024-04-26T17:00:00+00:00",
          "2024-04-26T18:00:00+00:00",
          "2024-04-26T19:00:00+00:00",
          "2024-04-26T20:00:00+00:00",
          "2024-04-26T21:00:00+00:00",
          "2024-04-26T22:00:00+00:00",
          "2024-04-26T23:00:00+00:00",
          "2024-04-27T00:00:00+00:00",
          "2024-04-27T01:00:00+00:00",
          "2024-04-27T02:00:00+00:00",
          "2024-04-27T03:00:00+00:00",
          "2024-04-27T04:00:00+00:00",
          "2024-04-27T05:00:00+00:00",
          "2024-04-27T06:00:00+00:00",
          "2024-04-27T07:00:00+00:00",
          "2024-04-27T08:00:00+00:00",
          "2024-04-27T09:00:00+00:00",
          "2024-04-27T10:00:00+00:00",
          "2024-04-27T11:00:00+00:00",
          "2024-04-27T12:00:00+00:00",
          "2024-04-27T13:00:00+00:00",
          "2024-04-27T14:00:00+00:00",
          "2024-04-27T15:00:00+00:00",
          "2024-04-27T16:00:00+00:00",
          "2024-04-27T17:00:00+00:00",
          "2024-04-27T18:00:00+00:00",
          "2024-04-27T19:00:00+00:00",
          "2024-04-27T20:00:00+00:00",
          "2024-04-27T21:00:00+00:00",
          "2024-04-27T22:00:00+00:00",
          "2024-04-27T23:00:00+00:00",
          "2024-04-28T00:00:00+00:00",
          "2024-04-28T01:00:00+00:00",
          "2024-04-28T02:00:00+00:00",
          "2024-04-28T03:00:00+00:00",
          "2024-04-28T05:00:00+00:00",
          "2024-04-28T06:00:00+00:00",
          "2024-04-28T07:00:00+00:00",
          "2024-04-28T08:00:00+00:00",
          "2024-04-20T00:00:00+00:00",
          "2024-04-20T01:00:00+00:00",
          "2024-04-20T02:00:00+00:00",
          "2024-04-20T03:00:00+00:00",
          "2024-04-20T04:00:00+00:00",
          "2024-04-20T05:00:00+00:00",
          "2024-04-20T06:00:00+00:00",
          "2024-04-20T07:00:00+00:00",
          "2024-04-20T08:00:00+00:00",
          "2024-04-20T09:00:00+00:00",
          "2024-04-20T10:00:00+00:00",
          "2024-04-20T11:00:00+00:00",
          "2024-04-20T13:00:00+00:00",
          "2024-04-20T14:00:00+00:00",
          "2024-04-20T15:00:00+00:00",
          "2024-04-20T16:00:00+00:00",
          "2024-04-20T17:00:00+00:00",
          "2024-04-20T18:00:00+00:00",
          "2024-04-20T19:00:00+00:00",
          "2024-04-20T20:00:00+00:00",
          "2024-04-20T21:00:00+00:00",
          "2024-04-20T22:00:00+00:00",
          "2024-04-20T23:00:00+00:00",
          "2024-04-21T00:00:00+00:00",
          "2024-04-21T01:00:00+00:00",
          "2024-04-21T02:00:00+00:00",
          "2024-04-21T03:00:00+00:00",
          "2024-04-21T04:00:00+00:00",
          "2024-04-21T05:00:00+00:00",
          "2024-04-21T06:00:00+00:00",
          "2024-04-21T07:00:00+00:00",
          "2024-04-21T08:00:00+00:00",
          "2024-04-21T09:00:00+00:00",
          "2024-04-21T10:00:00+00:00",
          "2024-04-21T11:00:00+00:00",
          "2024-04-21T12:00:00+00:00",
          "2024-04-21T13:00:00+00:00",
          "2024-04-21T14:00:00+00:00",
          "2024-04-21T15:00:00+00:00",
          "2024-04-21T16:00:00+00:00",
          "2024-04-21T17:00:00+00:00",
          "2024-04-21T18:00:00+00:00",
          "2024-04-21T19:00:00+00:00",
          "2024-04-21T20:00:00+00:00",
          "2024-04-21T21:00:00+00:00",
          "2024-04-21T22:00:00+00:00",
          "2024-04-21T23:00:00+00:00",
          "2024-04-22T00:00:00+00:00",
          "2024-04-22T01:00:00+00:00",
          "2024-04-22T02:00:00+00:00",
          "2024-04-22T03:00:00+00:00",
          "2024-04-22T04:00:00+00:00",
          "2024-04-22T05:00:00+00:00",
          "2024-04-22T06:00:00+00:00",
          "2024-04-22T07:00:00+00:00",
          "2024-04-22T08:00:00+00:00",
          "2024-04-22T09:00:00+00:00",
          "2024-04-22T10:00:00+00:00",
          "2024-04-22T11:00:00+00:00",
          "2024-04-22T12:00:00+00:00",
          "2024-04-22T13:00:00+00:00",
          "2024-04-22T14:00:00+00:00",
          "2024-04-22T15:00:00+00:00",
          "2024-04-22T16:00:00+00:00",
          "2024-04-22T17:00:00+00:00",
          "2024-04-22T18:00:00+00:00",
          "2024-04-22T19:00:00+00:00",
          "2024-04-22T20:00:00+00:00",
          "2024-04-22T21:00:00+00:00",
          "2024-04-22T22:00:00+00:00",
          "2024-04-22T23:00:00+00:00",
          "2024-04-23T00:00:00+00:00",
          "2024-04-23T01:00:00+00:00",
          "2024-04-23T02:00:00+00:00",
          "2024-04-23T03:00:00+00:00",
          "2024-04-23T04:00:00+00:00",
          "2024-04-23T05:00:00+00:00",
          "2024-04-23T06:00:00+00:00",
          "2024-04-23T07:00:00+00:00",
          "2024-04-23T08:00:00+00:00",
          "2024-04-23T09:00:00+00:00",
          "2024-04-23T10:00:00+00:00",
          "2024-04-23T11:00:00+00:00",
          "2024-04-23T12:00:00+00:00",
          "2024-04-23T13:00:00+00:00",
          "2024-04-23T14:00:00+00:00",
          "2024-04-23T15:00:00+00:00",
          "2024-04-23T16:00:00+00:00",
          "2024-04-23T17:00:00+00:00",
          "2024-04-23T18:00:00+00:00",
          "2024-04-23T19:00:00+00:00",
          "2024-04-23T20:00:00+00:00",
          "2024-04-23T21:00:00+00:00",
          "2024-04-23T22:00:00+00:00",
          "2024-04-23T23:00:00+00:00",
          "2024-04-24T00:00:00+00:00",
          "2024-04-24T01:00:00+00:00",
          "2024-04-24T02:00:00+00:00",
          "2024-04-24T03:00:00+00:00",
          "2024-04-24T04:00:00+00:00",
          "2024-04-24T05:00:00+00:00",
          "2024-04-24T06:00:00+00:00",
          "2024-04-24T07:00:00+00:00",
          "2024-04-24T08:00:00+00:00",
          "2024-04-24T09:00:00+00:00",
          "2024-04-24T10:00:00+00:00",
          "2024-04-24T11:00:00+00:00",
          "2024-04-24T12:00:00+00:00",
          "2024-04-24T13:00:00+00:00",
          "2024-04-24T14:00:00+00:00",
          "2024-04-24T15:00:00+00:00",
          "2024-04-24T16:00:00+00:00",
          "2024-04-24T17:00:00+00:00",
          "2024-04-24T18:00:00+00:00",
          "2024-04-24T19:00:00+00:00",
          "2024-04-24T20:00:00+00:00",
          "2024-04-24T21:00:00+00:00",
          "2024-04-24T22:00:00+00:00",
          "2024-04-24T23:00:00+00:00",
          "2024-04-25T00:00:00+00:00",
          "2024-04-25T01:00:00+00:00",
          "2024-04-25T02:00:00+00:00",
          "2024-04-25T03:00:00+00:00",
          "2024-04-25T04:00:00+00:00",
          "2024-04-25T05:00:00+00:00",
          "2024-04-25T06:00:00+00:00",
          "2024-04-25T07:00:00+00:00",
          "2024-04-25T08:00:00+00:00",
          "2024-04-25T09:00:00+00:00",
          "2024-04-25T10:00:00+00:00",
          "2024-04-25T11:00:00+00:00",
          "2024-04-25T12:00:00+00:00",
          "2024-04-25T13:00:00+00:00",
          "2024-04-25T14:00:00+00:00",
          "2024-04-25T15:00:00+00:00",
          "2024-04-25T16:00:00+00:00",
          "2024-04-25T17:00:00+00:00",
          "2024-04-25T18:00:00+00:00",
          "2024-04-25T19:00:00+00:00",
          "2024-04-25T20:00:00+00:00",
          "2024-04-25T21:00:00+00:00",
          "2024-04-25T22:00:00+00:00",
          "2024-04-25T23:00:00+00:00",
          "2024-04-26T00:00:00+00:00",
          "2024-04-26T01:00:00+00:00",
          "2024-04-26T02:00:00+00:00",
          "2024-04-26T03:00:00+00:00",
          "2024-04-26T04:00:00+00:00",
          "2024-04-26T05:00:00+00:00",
          "2024-04-26T06:00:00+00:00",
          "2024-04-26T07:00:00+00:00",
          "2024-04-26T08:00:00+00:00",
          "2024-04-26T09:00:00+00:00",
          "2024-04-26T10:00:00+00:00",
          "2024-04-26T11:00:00+00:00",
          "2024-04-26T12:00:00+00:00",
          "2024-04-26T13:00:00+00:00",
          "2024-04-26T14:00:00+00:00",
          "2024-04-26T15:00:00+00:00",
          "2024-04-26T16:00:00+00:00",
          "2024-04-26T17:00:00+00:00",
          "2024-04-26T18:00:00+00:00",
          "2024-04-26T19:00:00+00:00",
          "2024-04-26T20:00:00+00:00",
          "2024-04-26T21:00:00+00:00",
          "2024-04-26T22:00:00+00:00",
          "2024-04-26T23:00:00+00:00",
          "2024-04-27T00:00:00+00:00",
          "2024-04-27T01:00:00+00:00",
          "2024-04-27T02:00:00+00:00",
          "2024-04-27T03:00:00+00:00",
          "2024-04-27T04:00:00+00:00",
          "2024-04-27T05:00:00+00:00",
          "2024-04-27T06:00:00+00:00",
          "2024-04-27T07:00:00+00:00",
          "2024-04-27T08:00:00+00:00",
          "2024-04-27T09:00:00+00:00",
          "2024-04-27T10:00:00+00:00",
          "2024-04-27T11:00:00+00:00",
          "2024-04-27T12:00:00+00:00",
          "2024-04-27T13:00:00+00:00",
          "2024-04-27T14:00:00+00:00",
          "2024-04-27T15:00:00+00:00",
          "2024-04-27T16:00:00+00:00",
          "2024-04-27T17:00:00+00:00",
          "2024-04-27T18:00:00+00:00",
          "2024-04-27T19:00:00+00:00",
          "2024-04-27T20:00:00+00:00",
          "2024-04-27T21:00:00+00:00",
          "2024-04-27T22:00:00+00:00",
          "2024-04-27T23:00:00+00:00",
          "2024-04-28T00:00:00+00:00",
          "2024-04-28T01:00:00+00:00",
          "2024-04-28T02:00:00+00:00",
          "2024-04-28T03:00:00+00:00",
          "2024-04-28T05:00:00+00:00",
          "2024-04-28T06:00:00+00:00",
          "2024-04-28T07:00:00+00:00",
          "2024-04-28T08:00:00+00:00"
         ],
         "y": [
          6.46,
          6.06,
          6.05,
          6.15,
          5.84,
          5.78,
          6.85,
          7.23,
          8.35,
          9.66,
          9.53,
          6.81,
          7.77,
          7.28,
          6.72,
          7.1,
          6.87,
          6.37,
          5.82,
          5.63,
          5.27,
          4.71,
          3.75,
          3.24,
          2.83,
          2.29,
          1.84,
          1.62,
          2.11,
          3.98,
          5.75,
          6.66,
          7.14,
          7.42,
          8.3,
          8.73,
          9.17,
          8.84,
          8.69,
          7.89,
          6.91,
          5.66,
          5.05,
          4.64,
          4.51,
          4.41,
          4.08,
          4.05,
          4.1,
          4.06,
          4.05,
          4.03,
          4,
          4.55,
          5.59,
          6.27,
          7.24,
          8.24,
          9.02,
          8.75,
          9.3,
          9.67,
          9.59,
          9.53,
          8.52,
          6.41,
          5.26,
          4.49,
          4.1,
          3.68,
          3.62,
          3.43,
          3.19,
          3.23,
          3.12,
          2.52,
          2.64,
          3.11,
          4.3,
          5.51,
          6.5,
          7.1,
          8.35,
          8.99,
          8.96,
          8.97,
          9.13,
          9.19,
          8.72,
          8.05,
          7.6,
          7.43,
          7.33,
          7.15,
          6.91,
          6.66,
          6.6,
          6.2,
          5.96,
          5.82,
          5.7,
          5.84,
          5.87,
          6.03,
          6.16,
          6.11,
          6.44,
          7.17,
          7.75,
          8.04,
          7.98,
          8.14,
          7.6,
          6.93,
          5.96,
          5.37,
          4.87,
          4.76,
          4.85,
          4.77,
          4.42,
          4.15,
          3.74,
          2.93,
          4.47,
          6.33,
          7.81,
          8.88,
          9.14,
          9.97,
          10.93,
          11.85,
          12.06,
          12.65,
          12.35,
          11.56,
          10.23,
          9.33,
          7.32,
          5.53,
          4.1,
          2.8,
          1.24,
          1.16,
          0.42,
          -0.89,
          -0.02,
          -1.37,
          1.53,
          5.83,
          9.1,
          11.06,
          13.07,
          14.04,
          14.79,
          15.73,
          16.12,
          16.75,
          15.93,
          15.72,
          14.79,
          12.67,
          10.6,
          9.25,
          8.22,
          7,
          6.68,
          5.81,
          5.18,
          4.98,
          4.34,
          4.47,
          6.19,
          9.36,
          11.62,
          13.42,
          14.99,
          16.23,
          17.29,
          18.65,
          19.42,
          19.95,
          20.13,
          20.03,
          19.02,
          17.22,
          15.55,
          14.43,
          13.69,
          12.6,
          12.12,
          11.6,
          11.21,
          10.58,
          10.33,
          11.19,
          13.69,
          15.18,
          17.02,
          5.22,
          4.87,
          5.08,
          5.02,
          4.5,
          4.02,
          4.95,
          5.24,
          6.47,
          7.53,
          8.71,
          8.69,
          6.85,
          6.35,
          6.64,
          6.21,
          5.13,
          4.4,
          4.29,
          4.04,
          3.77,
          3.54,
          3.18,
          2.9,
          2.55,
          1.97,
          1.54,
          0.99,
          1.45,
          2.9,
          4.17,
          5.28,
          6.8,
          6.96,
          7.99,
          8.35,
          8.69,
          8.96,
          8.36,
          7.56,
          6.35,
          4.79,
          3.44,
          2.5,
          2.43,
          2.66,
          2.53,
          2.32,
          1.87,
          1.66,
          1.56,
          1.3,
          1.51,
          2.01,
          2.87,
          3.78,
          4.24,
          4.98,
          5.97,
          6.87,
          7.12,
          7.68,
          7.83,
          7.55,
          6.58,
          5.25,
          3.9,
          3.27,
          3.26,
          3.32,
          3.29,
          3.42,
          3.28,
          2.6,
          1.59,
          0.64,
          0.69,
          0.94,
          1.28,
          2.14,
          2.92,
          3.85,
          3.98,
          4.37,
          4.51,
          4.62,
          4.75,
          4.81,
          4.98,
          4.95,
          5.03,
          4.8,
          4.6,
          4.5,
          4.39,
          4.32,
          4.2,
          4.14,
          3.68,
          3.35,
          3.05,
          3.1,
          3.01,
          3.29,
          3.69,
          4,
          5.04,
          5.78,
          6.33,
          6.84,
          6,
          6.44,
          6.02,
          5.66,
          5.18,
          4.66,
          4.57,
          4.58,
          3.92,
          3.61,
          3.5,
          3.72,
          3.57,
          3.19,
          4.38,
          5.08,
          6.16,
          7.56,
          8.24,
          9.16,
          10.08,
          10.18,
          10.78,
          10.71,
          9.61,
          8.01,
          8.3,
          7.1,
          5.09,
          4.14,
          3.6,
          2.99,
          2.43,
          2.18,
          1.76,
          1.51,
          0.66,
          0.53,
          2.13,
          4.6,
          7.32,
          8.9,
          11.15,
          13.27,
          14.45,
          14.63,
          15.09,
          14.8,
          14.54,
          14.28,
          13.54,
          12.01,
          10.07,
          8.09,
          7.75,
          6.85,
          6.47,
          5.3,
          4.45,
          3.84,
          3.15,
          2.67,
          4.14,
          6.86,
          9.59,
          11.28,
          12.64,
          14.58,
          16.4,
          17.69,
          18.63,
          19.09,
          19.21,
          18.87,
          17.87,
          16.32,
          14.92,
          13.71,
          12.42,
          11.33,
          10.17,
          10.02,
          9.47,
          9.18,
          9.13,
          9.2,
          12.44,
          15,
          17.13
         ]
        },
        {
         "line": {
          "color": "red",
          "dash": "dash"
         },
         "mode": "lines+markers",
         "name": "Predicted T2M",
         "type": "scatter",
         "x": [
          "2024-04-28T09:00:00+00:00",
          "2024-04-28T10:00:00+00:00",
          "2024-04-28T11:00:00+00:00",
          "2024-04-28T12:00:00+00:00",
          "2024-04-28T13:00:00+00:00",
          "2024-04-28T14:00:00+00:00"
         ],
         "y": [
          18.161180500984194,
          18.957769786119464,
          19.384418253898623,
          19.583071236610415,
          20.004673157930377,
          19.927256469726565
         ]
        },
        {
         "line": {
          "color": "green"
         },
         "mode": "lines",
         "name": "Actual T2M",
         "type": "scatter",
         "x": [
          "2024-04-28T08:00:00+00:00",
          "2024-04-28T09:00:00+00:00",
          "2024-04-28T10:00:00+00:00",
          "2024-04-28T11:00:00+00:00",
          "2024-04-28T12:00:00+00:00",
          "2024-04-28T13:00:00+00:00",
          "2024-04-28T14:00:00+00:00",
          "2024-04-28T15:00:00+00:00",
          "2024-04-28T16:00:00+00:00",
          "2024-04-28T17:00:00+00:00",
          "2024-04-28T18:00:00+00:00",
          "2024-04-28T19:00:00+00:00",
          "2024-04-28T20:00:00+00:00",
          "2024-04-28T21:00:00+00:00",
          "2024-04-28T22:00:00+00:00",
          "2024-04-28T23:00:00+00:00",
          "2024-04-29T00:00:00+00:00",
          "2024-04-28T08:00:00+00:00",
          "2024-04-28T09:00:00+00:00",
          "2024-04-28T10:00:00+00:00",
          "2024-04-28T11:00:00+00:00",
          "2024-04-28T12:00:00+00:00",
          "2024-04-28T13:00:00+00:00",
          "2024-04-28T14:00:00+00:00",
          "2024-04-28T15:00:00+00:00",
          "2024-04-28T16:00:00+00:00",
          "2024-04-28T17:00:00+00:00",
          "2024-04-28T18:00:00+00:00",
          "2024-04-28T19:00:00+00:00",
          "2024-04-28T20:00:00+00:00",
          "2024-04-28T21:00:00+00:00",
          "2024-04-28T22:00:00+00:00",
          "2024-04-28T23:00:00+00:00",
          "2024-04-29T00:00:00+00:00"
         ],
         "y": [
          17.02,
          18.53,
          19.34,
          20.8,
          21.64,
          22.35,
          22.93,
          22.54,
          22.32,
          20.72,
          19.08,
          17.03,
          15.73,
          14.74,
          13.49,
          12.43,
          10.36,
          17.13,
          19.4,
          20.6,
          21.63,
          22.09,
          22.7,
          22.74,
          22.72,
          21.69,
          20.21,
          17.9,
          15.85,
          14.81,
          13.85,
          12.72,
          12.01,
          11.13
         ]
        }
       ],
       "layout": {
        "autosize": true,
        "hovermode": "x unified",
        "template": {
         "data": {
          "bar": [
           {
            "error_x": {
             "color": "#2a3f5f"
            },
            "error_y": {
             "color": "#2a3f5f"
            },
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "bar"
           }
          ],
          "barpolar": [
           {
            "marker": {
             "line": {
              "color": "#E5ECF6",
              "width": 0.5
             },
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "barpolar"
           }
          ],
          "carpet": [
           {
            "aaxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "baxis": {
             "endlinecolor": "#2a3f5f",
             "gridcolor": "white",
             "linecolor": "white",
             "minorgridcolor": "white",
             "startlinecolor": "#2a3f5f"
            },
            "type": "carpet"
           }
          ],
          "choropleth": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "choropleth"
           }
          ],
          "contour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "contour"
           }
          ],
          "contourcarpet": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "contourcarpet"
           }
          ],
          "heatmap": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmap"
           }
          ],
          "heatmapgl": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "heatmapgl"
           }
          ],
          "histogram": [
           {
            "marker": {
             "pattern": {
              "fillmode": "overlay",
              "size": 10,
              "solidity": 0.2
             }
            },
            "type": "histogram"
           }
          ],
          "histogram2d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2d"
           }
          ],
          "histogram2dcontour": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "histogram2dcontour"
           }
          ],
          "mesh3d": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "type": "mesh3d"
           }
          ],
          "parcoords": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "parcoords"
           }
          ],
          "pie": [
           {
            "automargin": true,
            "type": "pie"
           }
          ],
          "scatter": [
           {
            "fillpattern": {
             "fillmode": "overlay",
             "size": 10,
             "solidity": 0.2
            },
            "type": "scatter"
           }
          ],
          "scatter3d": [
           {
            "line": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatter3d"
           }
          ],
          "scattercarpet": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattercarpet"
           }
          ],
          "scattergeo": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergeo"
           }
          ],
          "scattergl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattergl"
           }
          ],
          "scattermapbox": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scattermapbox"
           }
          ],
          "scatterpolar": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolar"
           }
          ],
          "scatterpolargl": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterpolargl"
           }
          ],
          "scatterternary": [
           {
            "marker": {
             "colorbar": {
              "outlinewidth": 0,
              "ticks": ""
             }
            },
            "type": "scatterternary"
           }
          ],
          "surface": [
           {
            "colorbar": {
             "outlinewidth": 0,
             "ticks": ""
            },
            "colorscale": [
             [
              0,
              "#0d0887"
             ],
             [
              0.1111111111111111,
              "#46039f"
             ],
             [
              0.2222222222222222,
              "#7201a8"
             ],
             [
              0.3333333333333333,
              "#9c179e"
             ],
             [
              0.4444444444444444,
              "#bd3786"
             ],
             [
              0.5555555555555556,
              "#d8576b"
             ],
             [
              0.6666666666666666,
              "#ed7953"
             ],
             [
              0.7777777777777778,
              "#fb9f3a"
             ],
             [
              0.8888888888888888,
              "#fdca26"
             ],
             [
              1,
              "#f0f921"
             ]
            ],
            "type": "surface"
           }
          ],
          "table": [
           {
            "cells": {
             "fill": {
              "color": "#EBF0F8"
             },
             "line": {
              "color": "white"
             }
            },
            "header": {
             "fill": {
              "color": "#C8D4E3"
             },
             "line": {
              "color": "white"
             }
            },
            "type": "table"
           }
          ]
         },
         "layout": {
          "annotationdefaults": {
           "arrowcolor": "#2a3f5f",
           "arrowhead": 0,
           "arrowwidth": 1
          },
          "autotypenumbers": "strict",
          "coloraxis": {
           "colorbar": {
            "outlinewidth": 0,
            "ticks": ""
           }
          },
          "colorscale": {
           "diverging": [
            [
             0,
             "#8e0152"
            ],
            [
             0.1,
             "#c51b7d"
            ],
            [
             0.2,
             "#de77ae"
            ],
            [
             0.3,
             "#f1b6da"
            ],
            [
             0.4,
             "#fde0ef"
            ],
            [
             0.5,
             "#f7f7f7"
            ],
            [
             0.6,
             "#e6f5d0"
            ],
            [
             0.7,
             "#b8e186"
            ],
            [
             0.8,
             "#7fbc41"
            ],
            [
             0.9,
             "#4d9221"
            ],
            [
             1,
             "#276419"
            ]
           ],
           "sequential": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ],
           "sequentialminus": [
            [
             0,
             "#0d0887"
            ],
            [
             0.1111111111111111,
             "#46039f"
            ],
            [
             0.2222222222222222,
             "#7201a8"
            ],
            [
             0.3333333333333333,
             "#9c179e"
            ],
            [
             0.4444444444444444,
             "#bd3786"
            ],
            [
             0.5555555555555556,
             "#d8576b"
            ],
            [
             0.6666666666666666,
             "#ed7953"
            ],
            [
             0.7777777777777778,
             "#fb9f3a"
            ],
            [
             0.8888888888888888,
             "#fdca26"
            ],
            [
             1,
             "#f0f921"
            ]
           ]
          },
          "colorway": [
           "#636efa",
           "#EF553B",
           "#00cc96",
           "#ab63fa",
           "#FFA15A",
           "#19d3f3",
           "#FF6692",
           "#B6E880",
           "#FF97FF",
           "#FECB52"
          ],
          "font": {
           "color": "#2a3f5f"
          },
          "geo": {
           "bgcolor": "white",
           "lakecolor": "white",
           "landcolor": "#E5ECF6",
           "showlakes": true,
           "showland": true,
           "subunitcolor": "white"
          },
          "hoverlabel": {
           "align": "left"
          },
          "hovermode": "closest",
          "mapbox": {
           "style": "light"
          },
          "paper_bgcolor": "white",
          "plot_bgcolor": "#E5ECF6",
          "polar": {
           "angularaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "radialaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "scene": {
           "xaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "yaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           },
           "zaxis": {
            "backgroundcolor": "#E5ECF6",
            "gridcolor": "white",
            "gridwidth": 2,
            "linecolor": "white",
            "showbackground": true,
            "ticks": "",
            "zerolinecolor": "white"
           }
          },
          "shapedefaults": {
           "line": {
            "color": "#2a3f5f"
           }
          },
          "ternary": {
           "aaxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "baxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           },
           "bgcolor": "#E5ECF6",
           "caxis": {
            "gridcolor": "white",
            "linecolor": "white",
            "ticks": ""
           }
          },
          "title": {
           "x": 0.05
          },
          "xaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          },
          "yaxis": {
           "automargin": true,
           "gridcolor": "white",
           "linecolor": "white",
           "ticks": "",
           "title": {
            "standoff": 15
           },
           "zerolinecolor": "white",
           "zerolinewidth": 2
          }
         }
        },
        "title": {
         "text": "Temperature Predictions vs Actuals"
        },
        "xaxis": {
         "autorange": true,
         "range": [
          "2024-04-20",
          "2024-04-29 02:19:50.1153"
         ],
         "title": {
          "text": "Date"
         },
         "type": "date"
        },
        "yaxis": {
         "autorange": true,
         "range": [
          -2.7199999999999998,
          24.28
         ],
         "title": {
          "text": "Temperature (°C)"
         },
         "type": "linear"
        }
       }
      },
      "image/png": "",
      "text/html": [
       "<div>                            <div id=\"68df6565-f2a2-459b-a6b1-7b4134e19da6\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"68df6565-f2a2-459b-a6b1-7b4134e19da6\")) {                    Plotly.newPlot(                        \"68df6565-f2a2-459b-a6b1-7b4134e19da6\",                        [{\"line\":{\"color\":\"blue\"},\"mode\":\"lines\",\"name\":\"Original T2M\",\"x\":[\"2024-04-20T00:00:00+00:00\",\"2024-04-20T01:00:00+00:00\",\"2024-04-20T02:00:00+00:00\",\"2024-04-20T03:00:00+00:00\",\"2024-04-20T04:00:00+00:00\",\"2024-04-20T05:00:00+00:00\",\"2024-04-20T06:00:00+00:00\",\"2024-04-20T07:00:00+00:00\",\"2024-04-20T08:00:00+00:00\",\"2024-04-20T09:00:00+00:00\",\"2024-04-20T10:00:00+00:00\",\"2024-04-20T11:00:00+00:00\",\"2024-04-20T13:00:00+00:00\",\"2024-04-20T14:00:00+00:00\",\"2024-04-20T15:00:00+00:00\",\"2024-04-20T16:00:00+00:00\",\"2024-04-20T17:00:00+00:00\",\"2024-04-20T18:00:00+00:00\",\"2024-04-20T19:00:00+00:00\",\"2024-04-20T20:00:00+00:00\",\"2024-04-20T21:00:00+00:00\",\"2024-04-20T22:00:00+00:00\",\"2024-04-20T23:00:00+00:00\",\"2024-04-21T00:00:00+00:00\",\"2024-04-21T01:00:00+00:00\",\"2024-04-21T02:00:00+00:00\",\"2024-04-21T03:00:00+00:00\",\"2024-04-21T04:00:00+00:00\",\"2024-04-21T05:00:00+00:00\",\"2024-04-21T06:00:00+00:00\",\"2024-04-21T07:00:00+00:00\",\"2024-04-21T08:00:00+00:00\",\"2024-04-21T09:00:00+00:00\",\"2024-04-21T10:00:00+00:00\",\"2024-04-21T11:00:00+00:00\",\"2024-04-21T12:00:00+00:00\",\"2024-04-21T13:00:00+00:00\",\"2024-04-21T14:00:00+00:00\",\"2024-04-21T15:00:00+00:00\",\"2024-04-21T16:00:00+00:00\",\"2024-04-21T17:00:00+00:00\",\"2024-04-21T18:00:00+00:00\",\"2024-04-21T19:00:00+00:00\",\"2024-04-21T20:00:00+00:00\",\"2024-04-21T21:00:00+00:00\",\"2024-04-21T22:00:00+00:00\",\"2024-04-21T23:00:00+00:00\",\"2024-04-22T00:00:00+00:00\",\"2024-04-22T01:00:00+00:00\",\"2024-04-22T02:00:00+00:00\",\"2024-04-22T03:00:00+00:00\",\"2024-04-22T04:00:00+00:00\",\"2024-04-22T05:00:00+00:00\",\"2024-04-22T06:00:00+00:00\",\"2024-04-22T07:00:00+00:00\",\"2024-04-22T08:00:00+00:00\",\"2024-04-22T09:00:00+00:00\",\"2024-04-22T10:00:00+00:00\",\"2024-04-22T11:00:00+00:00\",\"2024-04-22T12:00:00+00:00\",\"2024-04-22T13:00:00+00:00\",\"2024-04-22T14:00:00+00:00\",\"2024-04-22T15:00:00+00:00\",\"2024-04-22T16:00:00+00:00\",\"2024-04-22T17:00:00+00:00\",\"2024-04-22T18:00:00+00:00\",\"2024-04-22T19:00:00+00:00\",\"2024-04-22T20:00:00+00:00\",\"2024-04-22T21:00:00+00:00\",\"2024-04-22T22:00:00+00:00\",\"2024-04-22T23:00:00+00:00\",\"2024-04-23T00:00:00+00:00\",\"2024-04-23T01:00:00+00:00\",\"2024-04-23T02:00:00+00:00\",\"2024-04-23T03:00:00+00:00\",\"2024-04-23T04:00:00+00:00\",\"2024-04-23T05:00:00+00:00\",\"2024-04-23T06:00:00+00:00\",\"2024-04-23T07:00:00+00:00\",\"2024-04-23T08:00:00+00:00\",\"2024-04-23T09:00:00+00:00\",\"2024-04-23T10:00:00+00:00\",\"2024-04-23T11:00:00+00:00\",\"2024-04-23T12:00:00+00:00\",\"2024-04-23T13:00:00+00:00\",\"2024-04-23T14:00:00+00:00\",\"2024-04-23T15:00:00+00:00\",\"2024-04-23T16:00:00+00:00\",\"2024-04-23T17:00:00+00:00\",\"2024-04-23T18:00:00+00:00\",\"2024-04-23T19:00:00+00:00\",\"2024-04-23T20:00:00+00:00\",\"2024-04-23T21:00:00+00:00\",\"2024-04-23T22:00:00+00:00\",\"2024-04-23T23:00:00+00:00\",\"2024-04-24T00:00:00+00:00\",\"2024-04-24T01:00:00+00:00\",\"2024-04-24T02:00:00+00:00\",\"2024-04-24T03:00:00+00:00\",\"2024-04-24T04:00:00+00:00\",\"2024-04-24T05:00:00+00:00\",\"2024-04-24T06:00:00+00:00\",\"2024-04-24T07:00:00+00:00\",\"2024-04-24T08:00:00+00:00\",\"2024-04-24T09:00:00+00:00\",\"2024-04-24T10:00:00+00:00\",\"2024-04-24T11:00:00+00:00\",\"2024-04-24T12:00:00+00:00\",\"2024-04-24T13:00:00+00:00\",\"2024-04-24T14:00:00+00:00\",\"2024-04-24T15:00:00+00:00\",\"2024-04-24T16:00:00+00:00\",\"2024-04-24T17:00:00+00:00\",\"2024-04-24T18:00:00+00:00\",\"2024-04-24T19:00:00+00:00\",\"2024-04-24T20:00:00+00:00\",\"2024-04-24T21:00:00+00:00\",\"2024-04-24T22:00:00+00:00\",\"2024-04-24T23:00:00+00:00\",\"2024-04-25T00:00:00+00:00\",\"2024-04-25T01:00:00+00:00\",\"2024-04-25T02:00:00+00:00\",\"2024-04-25T03:00:00+00:00\",\"2024-04-25T04:00:00+00:00\",\"2024-04-25T05:00:00+00:00\",\"2024-04-25T06:00:00+00:00\",\"2024-04-25T07:00:00+00:00\",\"2024-04-25T08:00:00+00:00\",\"2024-04-25T09:00:00+00:00\",\"2024-04-25T10:00:00+00:00\",\"2024-04-25T11:00:00+00:00\",\"2024-04-25T12:00:00+00:00\",\"2024-04-25T13:00:00+00:00\",\"2024-04-25T14:00:00+00:00\",\"2024-04-25T15:00:00+00:00\",\"2024-04-25T16:00:00+00:00\",\"2024-04-25T17:00:00+00:00\",\"2024-04-25T18:00:00+00:00\",\"2024-04-25T19:00:00+00:00\",\"2024-04-25T20:00:00+00:00\",\"2024-04-25T21:00:00+00:00\",\"2024-04-25T22:00:00+00:00\",\"2024-04-25T23:00:00+00:00\",\"2024-04-26T00:00:00+00:00\",\"2024-04-26T01:00:00+00:00\",\"2024-04-26T02:00:00+00:00\",\"2024-04-26T03:00:00+00:00\",\"2024-04-26T04:00:00+00:00\",\"2024-04-26T05:00:00+00:00\",\"2024-04-26T06:00:00+00:00\",\"2024-04-26T07:00:00+00:00\",\"2024-04-26T08:00:00+00:00\",\"2024-04-26T09:00:00+00:00\",\"2024-04-26T10:00:00+00:00\",\"2024-04-26T11:00:00+00:00\",\"2024-04-26T12:00:00+00:00\",\"2024-04-26T13:00:00+00:00\",\"2024-04-26T14:00:00+00:00\",\"2024-04-26T15:00:00+00:00\",\"2024-04-26T16:00:00+00:00\",\"2024-04-26T17:00:00+00:00\",\"2024-04-26T18:00:00+00:00\",\"2024-04-26T19:00:00+00:00\",\"2024-04-26T20:00:00+00:00\",\"2024-04-26T21:00:00+00:00\",\"2024-04-26T22:00:00+00:00\",\"2024-04-26T23:00:00+00:00\",\"2024-04-27T00:00:00+00:00\",\"2024-04-27T01:00:00+00:00\",\"2024-04-27T02:00:00+00:00\",\"2024-04-27T03:00:00+00:00\",\"2024-04-27T04:00:00+00:00\",\"2024-04-27T05:00:00+00:00\",\"2024-04-27T06:00:00+00:00\",\"2024-04-27T07:00:00+00:00\",\"2024-04-27T08:00:00+00:00\",\"2024-04-27T09:00:00+00:00\",\"2024-04-27T10:00:00+00:00\",\"2024-04-27T11:00:00+00:00\",\"2024-04-27T12:00:00+00:00\",\"2024-04-27T13:00:00+00:00\",\"2024-04-27T14:00:00+00:00\",\"2024-04-27T15:00:00+00:00\",\"2024-04-27T16:00:00+00:00\",\"2024-04-27T17:00:00+00:00\",\"2024-04-27T18:00:00+00:00\",\"2024-04-27T19:00:00+00:00\",\"2024-04-27T20:00:00+00:00\",\"2024-04-27T21:00:00+00:00\",\"2024-04-27T22:00:00+00:00\",\"2024-04-27T23:00:00+00:00\",\"2024-04-28T00:00:00+00:00\",\"2024-04-28T01:00:00+00:00\",\"2024-04-28T02:00:00+00:00\",\"2024-04-28T03:00:00+00:00\",\"2024-04-28T05:00:00+00:00\",\"2024-04-28T06:00:00+00:00\",\"2024-04-28T07:00:00+00:00\",\"2024-04-28T08:00:00+00:00\",\"2024-04-20T00:00:00+00:00\",\"2024-04-20T01:00:00+00:00\",\"2024-04-20T02:00:00+00:00\",\"2024-04-20T03:00:00+00:00\",\"2024-04-20T04:00:00+00:00\",\"2024-04-20T05:00:00+00:00\",\"2024-04-20T06:00:00+00:00\",\"2024-04-20T07:00:00+00:00\",\"2024-04-20T08:00:00+00:00\",\"2024-04-20T09:00:00+00:00\",\"2024-04-20T10:00:00+00:00\",\"2024-04-20T11:00:00+00:00\",\"2024-04-20T13:00:00+00:00\",\"2024-04-20T14:00:00+00:00\",\"2024-04-20T15:00:00+00:00\",\"2024-04-20T16:00:00+00:00\",\"2024-04-20T17:00:00+00:00\",\"2024-04-20T18:00:00+00:00\",\"2024-04-20T19:00:00+00:00\",\"2024-04-20T20:00:00+00:00\",\"2024-04-20T21:00:00+00:00\",\"2024-04-20T22:00:00+00:00\",\"2024-04-20T23:00:00+00:00\",\"2024-04-21T00:00:00+00:00\",\"2024-04-21T01:00:00+00:00\",\"2024-04-21T02:00:00+00:00\",\"2024-04-21T03:00:00+00:00\",\"2024-04-21T04:00:00+00:00\",\"2024-04-21T05:00:00+00:00\",\"2024-04-21T06:00:00+00:00\",\"2024-04-21T07:00:00+00:00\",\"2024-04-21T08:00:00+00:00\",\"2024-04-21T09:00:00+00:00\",\"2024-04-21T10:00:00+00:00\",\"2024-04-21T11:00:00+00:00\",\"2024-04-21T12:00:00+00:00\",\"2024-04-21T13:00:00+00:00\",\"2024-04-21T14:00:00+00:00\",\"2024-04-21T15:00:00+00:00\",\"2024-04-21T16:00:00+00:00\",\"2024-04-21T17:00:00+00:00\",\"2024-04-21T18:00:00+00:00\",\"2024-04-21T19:00:00+00:00\",\"2024-04-21T20:00:00+00:00\",\"2024-04-21T21:00:00+00:00\",\"2024-04-21T22:00:00+00:00\",\"2024-04-21T23:00:00+00:00\",\"2024-04-22T00:00:00+00:00\",\"2024-04-22T01:00:00+00:00\",\"2024-04-22T02:00:00+00:00\",\"2024-04-22T03:00:00+00:00\",\"2024-04-22T04:00:00+00:00\",\"2024-04-22T05:00:00+00:00\",\"2024-04-22T06:00:00+00:00\",\"2024-04-22T07:00:00+00:00\",\"2024-04-22T08:00:00+00:00\",\"2024-04-22T09:00:00+00:00\",\"2024-04-22T10:00:00+00:00\",\"2024-04-22T11:00:00+00:00\",\"2024-04-22T12:00:00+00:00\",\"2024-04-22T13:00:00+00:00\",\"2024-04-22T14:00:00+00:00\",\"2024-04-22T15:00:00+00:00\",\"2024-04-22T16:00:00+00:00\",\"2024-04-22T17:00:00+00:00\",\"2024-04-22T18:00:00+00:00\",\"2024-04-22T19:00:00+00:00\",\"2024-04-22T20:00:00+00:00\",\"2024-04-22T21:00:00+00:00\",\"2024-04-22T22:00:00+00:00\",\"2024-04-22T23:00:00+00:00\",\"2024-04-23T00:00:00+00:00\",\"2024-04-23T01:00:00+00:00\",\"2024-04-23T02:00:00+00:00\",\"2024-04-23T03:00:00+00:00\",\"2024-04-23T04:00:00+00:00\",\"2024-04-23T05:00:00+00:00\",\"2024-04-23T06:00:00+00:00\",\"2024-04-23T07:00:00+00:00\",\"2024-04-23T08:00:00+00:00\",\"2024-04-23T09:00:00+00:00\",\"2024-04-23T10:00:00+00:00\",\"2024-04-23T11:00:00+00:00\",\"2024-04-23T12:00:00+00:00\",\"2024-04-23T13:00:00+00:00\",\"2024-04-23T14:00:00+00:00\",\"2024-04-23T15:00:00+00:00\",\"2024-04-23T16:00:00+00:00\",\"2024-04-23T17:00:00+00:00\",\"2024-04-23T18:00:00+00:00\",\"2024-04-23T19:00:00+00:00\",\"2024-04-23T20:00:00+00:00\",\"2024-04-23T21:00:00+00:00\",\"2024-04-23T22:00:00+00:00\",\"2024-04-23T23:00:00+00:00\",\"2024-04-24T00:00:00+00:00\",\"2024-04-24T01:00:00+00:00\",\"2024-04-24T02:00:00+00:00\",\"2024-04-24T03:00:00+00:00\",\"2024-04-24T04:00:00+00:00\",\"2024-04-24T05:00:00+00:00\",\"2024-04-24T06:00:00+00:00\",\"2024-04-24T07:00:00+00:00\",\"2024-04-24T08:00:00+00:00\",\"2024-04-24T09:00:00+00:00\",\"2024-04-24T10:00:00+00:00\",\"2024-04-24T11:00:00+00:00\",\"2024-04-24T12:00:00+00:00\",\"2024-04-24T13:00:00+00:00\",\"2024-04-24T14:00:00+00:00\",\"2024-04-24T15:00:00+00:00\",\"2024-04-24T16:00:00+00:00\",\"2024-04-24T17:00:00+00:00\",\"2024-04-24T18:00:00+00:00\",\"2024-04-24T19:00:00+00:00\",\"2024-04-24T20:00:00+00:00\",\"2024-04-24T21:00:00+00:00\",\"2024-04-24T22:00:00+00:00\",\"2024-04-24T23:00:00+00:00\",\"2024-04-25T00:00:00+00:00\",\"2024-04-25T01:00:00+00:00\",\"2024-04-25T02:00:00+00:00\",\"2024-04-25T03:00:00+00:00\",\"2024-04-25T04:00:00+00:00\",\"2024-04-25T05:00:00+00:00\",\"2024-04-25T06:00:00+00:00\",\"2024-04-25T07:00:00+00:00\",\"2024-04-25T08:00:00+00:00\",\"2024-04-25T09:00:00+00:00\",\"2024-04-25T10:00:00+00:00\",\"2024-04-25T11:00:00+00:00\",\"2024-04-25T12:00:00+00:00\",\"2024-04-25T13:00:00+00:00\",\"2024-04-25T14:00:00+00:00\",\"2024-04-25T15:00:00+00:00\",\"2024-04-25T16:00:00+00:00\",\"2024-04-25T17:00:00+00:00\",\"2024-04-25T18:00:00+00:00\",\"2024-04-25T19:00:00+00:00\",\"2024-04-25T20:00:00+00:00\",\"2024-04-25T21:00:00+00:00\",\"2024-04-25T22:00:00+00:00\",\"2024-04-25T23:00:00+00:00\",\"2024-04-26T00:00:00+00:00\",\"2024-04-26T01:00:00+00:00\",\"2024-04-26T02:00:00+00:00\",\"2024-04-26T03:00:00+00:00\",\"2024-04-26T04:00:00+00:00\",\"2024-04-26T05:00:00+00:00\",\"2024-04-26T06:00:00+00:00\",\"2024-04-26T07:00:00+00:00\",\"2024-04-26T08:00:00+00:00\",\"2024-04-26T09:00:00+00:00\",\"2024-04-26T10:00:00+00:00\",\"2024-04-26T11:00:00+00:00\",\"2024-04-26T12:00:00+00:00\",\"2024-04-26T13:00:00+00:00\",\"2024-04-26T14:00:00+00:00\",\"2024-04-26T15:00:00+00:00\",\"2024-04-26T16:00:00+00:00\",\"2024-04-26T17:00:00+00:00\",\"2024-04-26T18:00:00+00:00\",\"2024-04-26T19:00:00+00:00\",\"2024-04-26T20:00:00+00:00\",\"2024-04-26T21:00:00+00:00\",\"2024-04-26T22:00:00+00:00\",\"2024-04-26T23:00:00+00:00\",\"2024-04-27T00:00:00+00:00\",\"2024-04-27T01:00:00+00:00\",\"2024-04-27T02:00:00+00:00\",\"2024-04-27T03:00:00+00:00\",\"2024-04-27T04:00:00+00:00\",\"2024-04-27T05:00:00+00:00\",\"2024-04-27T06:00:00+00:00\",\"2024-04-27T07:00:00+00:00\",\"2024-04-27T08:00:00+00:00\",\"2024-04-27T09:00:00+00:00\",\"2024-04-27T10:00:00+00:00\",\"2024-04-27T11:00:00+00:00\",\"2024-04-27T12:00:00+00:00\",\"2024-04-27T13:00:00+00:00\",\"2024-04-27T14:00:00+00:00\",\"2024-04-27T15:00:00+00:00\",\"2024-04-27T16:00:00+00:00\",\"2024-04-27T17:00:00+00:00\",\"2024-04-27T18:00:00+00:00\",\"2024-04-27T19:00:00+00:00\",\"2024-04-27T20:00:00+00:00\",\"2024-04-27T21:00:00+00:00\",\"2024-04-27T22:00:00+00:00\",\"2024-04-27T23:00:00+00:00\",\"2024-04-28T00:00:00+00:00\",\"2024-04-28T01:00:00+00:00\",\"2024-04-28T02:00:00+00:00\",\"2024-04-28T03:00:00+00:00\",\"2024-04-28T05:00:00+00:00\",\"2024-04-28T06:00:00+00:00\",\"2024-04-28T07:00:00+00:00\",\"2024-04-28T08:00:00+00:00\"],\"y\":[6.46,6.06,6.05,6.15,5.84,5.78,6.85,7.23,8.35,9.66,9.53,6.81,7.77,7.28,6.72,7.1,6.87,6.37,5.82,5.63,5.27,4.71,3.75,3.24,2.83,2.29,1.84,1.62,2.11,3.98,5.75,6.66,7.14,7.42,8.3,8.73,9.17,8.84,8.69,7.89,6.91,5.66,5.05,4.64,4.51,4.41,4.08,4.05,4.1,4.06,4.05,4.03,4.0,4.55,5.59,6.27,7.24,8.24,9.02,8.75,9.3,9.67,9.59,9.53,8.52,6.41,5.26,4.49,4.1,3.68,3.62,3.43,3.19,3.23,3.12,2.52,2.64,3.11,4.3,5.51,6.5,7.1,8.35,8.99,8.96,8.97,9.13,9.19,8.72,8.05,7.6,7.43,7.33,7.15,6.91,6.66,6.6,6.2,5.96,5.82,5.7,5.84,5.87,6.03,6.16,6.11,6.44,7.17,7.75,8.04,7.98,8.14,7.6,6.93,5.96,5.37,4.87,4.76,4.85,4.77,4.42,4.15,3.74,2.93,4.47,6.33,7.81,8.88,9.14,9.97,10.93,11.85,12.06,12.65,12.35,11.56,10.23,9.33,7.32,5.53,4.1,2.8,1.24,1.16,0.42,-0.89,-0.02,-1.37,1.53,5.83,9.1,11.06,13.07,14.04,14.79,15.73,16.12,16.75,15.93,15.72,14.79,12.67,10.6,9.25,8.22,7.0,6.68,5.81,5.18,4.98,4.34,4.47,6.19,9.36,11.62,13.42,14.99,16.23,17.29,18.65,19.42,19.95,20.13,20.03,19.02,17.22,15.55,14.43,13.69,12.6,12.12,11.6,11.21,10.58,10.33,11.19,13.69,15.18,17.02,5.22,4.87,5.08,5.02,4.5,4.02,4.95,5.24,6.47,7.53,8.71,8.69,6.85,6.35,6.64,6.21,5.13,4.4,4.29,4.04,3.77,3.54,3.18,2.9,2.55,1.97,1.54,0.99,1.45,2.9,4.17,5.28,6.8,6.96,7.99,8.35,8.69,8.96,8.36,7.56,6.35,4.79,3.44,2.5,2.43,2.66,2.53,2.32,1.87,1.66,1.56,1.3,1.51,2.01,2.87,3.78,4.24,4.98,5.97,6.87,7.12,7.68,7.83,7.55,6.58,5.25,3.9,3.27,3.26,3.32,3.29,3.42,3.28,2.6,1.59,0.64,0.69,0.94,1.28,2.14,2.92,3.85,3.98,4.37,4.51,4.62,4.75,4.81,4.98,4.95,5.03,4.8,4.6,4.5,4.39,4.32,4.2,4.14,3.68,3.35,3.05,3.1,3.01,3.29,3.69,4.0,5.04,5.78,6.33,6.84,6.0,6.44,6.02,5.66,5.18,4.66,4.57,4.58,3.92,3.61,3.5,3.72,3.57,3.19,4.38,5.08,6.16,7.56,8.24,9.16,10.08,10.18,10.78,10.71,9.61,8.01,8.3,7.1,5.09,4.14,3.6,2.99,2.43,2.18,1.76,1.51,0.66,0.53,2.13,4.6,7.32,8.9,11.15,13.27,14.45,14.63,15.09,14.8,14.54,14.28,13.54,12.01,10.07,8.09,7.75,6.85,6.47,5.3,4.45,3.84,3.15,2.67,4.14,6.86,9.59,11.28,12.64,14.58,16.4,17.69,18.63,19.09,19.21,18.87,17.87,16.32,14.92,13.71,12.42,11.33,10.17,10.02,9.47,9.18,9.13,9.2,12.44,15.0,17.13],\"type\":\"scatter\"},{\"line\":{\"color\":\"red\",\"dash\":\"dash\"},\"mode\":\"lines+markers\",\"name\":\"Predicted T2M\",\"x\":[\"2024-04-28T09:00:00+00:00\",\"2024-04-28T10:00:00+00:00\",\"2024-04-28T11:00:00+00:00\",\"2024-04-28T12:00:00+00:00\",\"2024-04-28T13:00:00+00:00\",\"2024-04-28T14:00:00+00:00\"],\"y\":[18.161180500984194,18.957769786119464,19.384418253898623,19.583071236610415,20.004673157930377,19.927256469726565],\"type\":\"scatter\"},{\"line\":{\"color\":\"green\"},\"mode\":\"lines\",\"name\":\"Actual T2M\",\"x\":[\"2024-04-28T08:00:00+00:00\",\"2024-04-28T09:00:00+00:00\",\"2024-04-28T10:00:00+00:00\",\"2024-04-28T11:00:00+00:00\",\"2024-04-28T12:00:00+00:00\",\"2024-04-28T13:00:00+00:00\",\"2024-04-28T14:00:00+00:00\",\"2024-04-28T15:00:00+00:00\",\"2024-04-28T16:00:00+00:00\",\"2024-04-28T17:00:00+00:00\",\"2024-04-28T18:00:00+00:00\",\"2024-04-28T19:00:00+00:00\",\"2024-04-28T20:00:00+00:00\",\"2024-04-28T21:00:00+00:00\",\"2024-04-28T22:00:00+00:00\",\"2024-04-28T23:00:00+00:00\",\"2024-04-29T00:00:00+00:00\",\"2024-04-28T08:00:00+00:00\",\"2024-04-28T09:00:00+00:00\",\"2024-04-28T10:00:00+00:00\",\"2024-04-28T11:00:00+00:00\",\"2024-04-28T12:00:00+00:00\",\"2024-04-28T13:00:00+00:00\",\"2024-04-28T14:00:00+00:00\",\"2024-04-28T15:00:00+00:00\",\"2024-04-28T16:00:00+00:00\",\"2024-04-28T17:00:00+00:00\",\"2024-04-28T18:00:00+00:00\",\"2024-04-28T19:00:00+00:00\",\"2024-04-28T20:00:00+00:00\",\"2024-04-28T21:00:00+00:00\",\"2024-04-28T22:00:00+00:00\",\"2024-04-28T23:00:00+00:00\",\"2024-04-29T00:00:00+00:00\"],\"y\":[17.02,18.53,19.34,20.8,21.64,22.35,22.93,22.54,22.32,20.72,19.08,17.03,15.73,14.74,13.49,12.43,10.36,17.13,19.4,20.6,21.63,22.09,22.7,22.74,22.72,21.69,20.21,17.9,15.85,14.81,13.85,12.72,12.01,11.13],\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"title\":{\"text\":\"Temperature Predictions vs Actuals\"},\"xaxis\":{\"title\":{\"text\":\"Date\"}},\"yaxis\":{\"title\":{\"text\":\"Temperature (\\u00b0C)\"}},\"hovermode\":\"x unified\"},                        {\"responsive\": true}                    ).then(function(){\n",
       "                            \n",
       "var gd = document.getElementById('68df6565-f2a2-459b-a6b1-7b4134e19da6');\n",
       "var x = new MutationObserver(function (mutations, observer) {{\n",
       "        var display = window.getComputedStyle(gd).display;\n",
       "        if (!display || display === 'none') {{\n",
       "            console.log([gd, 'removed!']);\n",
       "            Plotly.purge(gd);\n",
       "            observer.disconnect();\n",
       "        }}\n",
       "}});\n",
       "\n",
       "// Listen for the removal of the full notebook cells\n",
       "var notebookContainer = gd.closest('#notebook-container');\n",
       "if (notebookContainer) {{\n",
       "    x.observe(notebookContainer, {childList: true});\n",
       "}}\n",
       "\n",
       "// Listen for the clearing of the current output cell\n",
       "var outputEl = gd.closest('.output');\n",
       "if (outputEl) {{\n",
       "    x.observe(outputEl, {childList: true});\n",
       "}}\n",
       "\n",
       "                        })                };                });            </script>        </div>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Assuming 'get_data_for_convlstm' is defined elsewhere and properly implemented\n",
    "data_for_prediction, time_index_pre_data = get_data_for_convlstm('2024-04-20T00', '2024-04-28T08')\n",
    "\n",
    "# Ensure scaler is fitted; if it's the first use, fit on some initial data or the current data\n",
    "scaler = MinMaxScaler()\n",
    "scaler.fit(data_for_prediction)  # Fit if not already done; else skip\n",
    "\n",
    "# Transform the data for prediction\n",
    "df_scaled = scaler.transform(data_for_prediction)\n",
    "df_scaled = pd.DataFrame(df_scaled, columns=data_for_prediction.columns)\n",
    "latest_sequence = df_scaled.tail(sequence_length).values.reshape(1, sequence_length, 1, 1, feature_count)\n",
    "future_temperatures = model.predict(latest_sequence)\n",
    "dummy_output_array = np.zeros((hours_to_predict, scaler.n_features_in_))\n",
    "dummy_output_array[:, 3] = future_temperatures.flatten()  # Ensure to flatten if necessary\n",
    "predicted_temps = scaler.inverse_transform(dummy_output_array)[:, 3]\n",
    "\n",
    "# Timestamp handling\n",
    "data_for_prediction.index = time_index_pre_data\n",
    "last_timestamp = data_for_prediction.index[-1]\n",
    "prediction_frequency = 'H'\n",
    "new_timestamps = pd.date_range(start=last_timestamp + pd.Timedelta(hours=1), periods=len(predicted_temps), freq=prediction_frequency)\n",
    "predictions_df = pd.DataFrame(predicted_temps, index=new_timestamps, columns=['Predicted T2M'])\n",
    "\n",
    "# Fetch and set the actual data for comparison\n",
    "data_actual_for_prediction, time_index_actual_data = get_data_for_convlstm('2024-04-28T08', '2024-04-29T00')\n",
    "data_actual_for_prediction.index = time_index_actual_data\n",
    "\n",
    "# Plotting the predictions alongside the actual data\n",
    "fig = go.Figure()\n",
    "fig.add_trace(go.Scatter(x=data_for_prediction.index, y=data_for_prediction['T2M'], mode='lines', name='Original T2M', line=dict(color='blue')))\n",
    "fig.add_trace(go.Scatter(x=predictions_df.index, y=predictions_df['Predicted T2M'], mode='lines+markers', name='Predicted T2M', line=dict(color='red', dash='dash')))\n",
    "fig.add_trace(go.Scatter(x=data_actual_for_prediction.index, y=data_actual_for_prediction['T2M'], mode='lines', name='Actual T2M', line=dict(color='green')))\n",
    "\n",
    "fig.update_layout(\n",
    "    title='Temperature Predictions vs Actuals',\n",
    "    xaxis_title='Date',\n",
    "    yaxis_title='Temperature (°C)',\n",
    "    hovermode=\"x unified\"\n",
    ")\n",
    "\n",
    "fig.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "fabbbead-b691-4dcd-84ac-2354c1de8cc8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['model_folder20240429_171203/scaler.pkl']"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "formatted_date_time = datetime.now().strftime(\"%Y%m%d_%H%M%S\")\n",
    "model_folder_name = f\"model_folder{formatted_date_time}\"\n",
    "os.makedirs(model_folder_name, exist_ok=True)\n",
    "model.save(os.path.join(model_folder_name, 'model.keras'))\n",
    "joblib.dump(scaler, os.path.join(model_folder_name, 'scaler.pkl'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "90c4c21b-479e-468f-b421-38f30bb99c6b",
   "metadata": {},
   "outputs": [],
   "source": [
    "loaded_model = tf.keras.models.load_model(os.path.join(model_folder_name, 'model.keras'))\n",
    "loaded_scaler = joblib.load(os.path.join(model_folder_name, 'scaler.pkl'))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "8fab5630-8739-4d39-99f9-a55eece3a3af",
   "metadata": {},
   "outputs": [],
   "source": [
    "#end"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "ae6fef75-d994-4a33-85a5-64fc89ee7b39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;\n",
       "Dimensions:     (number: 1, time: 1, step: 125, surface: 1, latitude: 125,\n",
       "                 longitude: 93)\n",
       "Coordinates:\n",
       "  * number      (number) int64 0\n",
       "  * time        (time) datetime64[ns] 2017-12-02\n",
       "  * step        (step) timedelta64[ns] 00:00:00 01:00:00 ... 10 days 00:00:00\n",
       "  * surface     (surface) float64 0.0\n",
       "  * latitude    (latitude) float64 67.0 66.75 66.5 66.25 ... 36.5 36.25 36.0\n",
       "  * longitude   (longitude) float64 -6.0 -5.75 -5.5 -5.25 ... 16.5 16.75 17.0\n",
       "    valid_time  (time, step) datetime64[ns] ...\n",
       "Data variables:\n",
       "    t2m         (number, time, step, surface, latitude, longitude) float32 ...\n",
       "Attributes:\n",
       "    GRIB_edition:            1\n",
       "    GRIB_centre:             ecmf\n",
       "    GRIB_centreDescription:  European Centre for Medium-Range Weather Forecasts\n",
       "    GRIB_subCentre:          0\n",
       "    Conventions:             CF-1.7\n",
       "    institution:             European Centre for Medium-Range Weather Forecasts\n",
       "    history:                 2024-04-29T19:05 GRIB to CDM+CF via cfgrib-0.9.1...</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-339f9ec4-1807-45e0-aec9-0be066ec8638' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-339f9ec4-1807-45e0-aec9-0be066ec8638' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>number</span>: 1</li><li><span class='xr-has-index'>time</span>: 1</li><li><span class='xr-has-index'>step</span>: 125</li><li><span class='xr-has-index'>surface</span>: 1</li><li><span class='xr-has-index'>latitude</span>: 125</li><li><span class='xr-has-index'>longitude</span>: 93</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-8628a35b-3d73-4702-8409-87a10c290239' class='xr-section-summary-in' type='checkbox'  checked><label for='section-8628a35b-3d73-4702-8409-87a10c290239' class='xr-section-summary' >Coordinates: <span>(7)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>number</span></div><div class='xr-var-dims'>(number)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0</div><input id='attrs-24e83b55-9cab-486e-baaf-00d72aa92a06' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-24e83b55-9cab-486e-baaf-00d72aa92a06' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-8e7fc3e8-63ef-4068-9758-e61f390dd8ce' class='xr-var-data-in' type='checkbox'><label for='data-8e7fc3e8-63ef-4068-9758-e61f390dd8ce' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>ensemble member numerical id</dd><dt><span>units :</span></dt><dd>1</dd><dt><span>standard_name :</span></dt><dd>realization</dd></dl></div><div class='xr-var-data'><pre>array([0])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2017-12-02</div><input id='attrs-83f222ac-5a41-4858-8b83-524b5990761d' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-83f222ac-5a41-4858-8b83-524b5990761d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-155d2746-15ea-425b-bb9a-f336b6aed8df' class='xr-var-data-in' type='checkbox'><label for='data-155d2746-15ea-425b-bb9a-f336b6aed8df' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>initial time of forecast</dd><dt><span>standard_name :</span></dt><dd>forecast_reference_time</dd></dl></div><div class='xr-var-data'><pre>array([&#x27;2017-12-02T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>step</span></div><div class='xr-var-dims'>(step)</div><div class='xr-var-dtype'>timedelta64[ns]</div><div class='xr-var-preview xr-preview'>00:00:00 ... 10 days 00:00:00</div><input id='attrs-a15de306-bf2a-4251-9929-d5e3d7a1126b' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-a15de306-bf2a-4251-9929-d5e3d7a1126b' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-57ee41bc-abd5-4774-b27f-31459073873f' class='xr-var-data-in' type='checkbox'><label for='data-57ee41bc-abd5-4774-b27f-31459073873f' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>time since forecast_reference_time</dd><dt><span>standard_name :</span></dt><dd>forecast_period</dd></dl></div><div class='xr-var-data'><pre>array([              0,   3600000000000,   7200000000000,  10800000000000,\n",
       "        14400000000000,  18000000000000,  21600000000000,  25200000000000,\n",
       "        28800000000000,  32400000000000,  36000000000000,  39600000000000,\n",
       "        43200000000000,  46800000000000,  50400000000000,  54000000000000,\n",
       "        57600000000000,  61200000000000,  64800000000000,  68400000000000,\n",
       "        72000000000000,  75600000000000,  79200000000000,  82800000000000,\n",
       "        86400000000000,  90000000000000,  93600000000000,  97200000000000,\n",
       "       100800000000000, 104400000000000, 108000000000000, 111600000000000,\n",
       "       115200000000000, 118800000000000, 122400000000000, 126000000000000,\n",
       "       129600000000000, 133200000000000, 136800000000000, 140400000000000,\n",
       "       144000000000000, 147600000000000, 151200000000000, 154800000000000,\n",
       "       158400000000000, 162000000000000, 165600000000000, 169200000000000,\n",
       "       172800000000000, 176400000000000, 180000000000000, 183600000000000,\n",
       "       187200000000000, 190800000000000, 194400000000000, 198000000000000,\n",
       "       201600000000000, 205200000000000, 208800000000000, 212400000000000,\n",
       "       216000000000000, 219600000000000, 223200000000000, 226800000000000,\n",
       "       230400000000000, 234000000000000, 237600000000000, 241200000000000,\n",
       "       244800000000000, 248400000000000, 252000000000000, 255600000000000,\n",
       "       259200000000000, 262800000000000, 266400000000000, 270000000000000,\n",
       "       273600000000000, 277200000000000, 280800000000000, 284400000000000,\n",
       "       288000000000000, 291600000000000, 295200000000000, 298800000000000,\n",
       "       302400000000000, 306000000000000, 309600000000000, 313200000000000,\n",
       "       316800000000000, 320400000000000, 324000000000000, 334800000000000,\n",
       "       345600000000000, 356400000000000, 367200000000000, 378000000000000,\n",
       "       388800000000000, 399600000000000, 410400000000000, 421200000000000,\n",
       "       432000000000000, 442800000000000, 453600000000000, 464400000000000,\n",
       "       475200000000000, 486000000000000, 496800000000000, 507600000000000,\n",
       "       518400000000000, 540000000000000, 561600000000000, 583200000000000,\n",
       "       604800000000000, 626400000000000, 648000000000000, 669600000000000,\n",
       "       691200000000000, 712800000000000, 734400000000000, 756000000000000,\n",
       "       777600000000000, 799200000000000, 820800000000000, 842400000000000,\n",
       "       864000000000000], dtype=&#x27;timedelta64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>surface</span></div><div class='xr-var-dims'>(surface)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.0</div><input id='attrs-fb9cd54f-d411-4fbe-8f82-c4537c8af7ce' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-fb9cd54f-d411-4fbe-8f82-c4537c8af7ce' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-fcb65cd4-2a0b-4c3a-8056-9a92f355d543' class='xr-var-data-in' type='checkbox'><label for='data-fcb65cd4-2a0b-4c3a-8056-9a92f355d543' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>original GRIB coordinate for key: level(surface)</dd><dt><span>units :</span></dt><dd>1</dd></dl></div><div class='xr-var-data'><pre>array([0.])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>latitude</span></div><div class='xr-var-dims'>(latitude)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>67.0 66.75 66.5 ... 36.5 36.25 36.0</div><input id='attrs-23adfeaf-de99-41ee-9167-10f30687874d' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-23adfeaf-de99-41ee-9167-10f30687874d' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-bc5d890a-964d-4643-9fbf-4b89a264e0a4' class='xr-var-data-in' type='checkbox'><label for='data-bc5d890a-964d-4643-9fbf-4b89a264e0a4' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>units :</span></dt><dd>degrees_north</dd><dt><span>standard_name :</span></dt><dd>latitude</dd><dt><span>long_name :</span></dt><dd>latitude</dd><dt><span>stored_direction :</span></dt><dd>decreasing</dd></dl></div><div class='xr-var-data'><pre>array([67.  , 66.75, 66.5 , 66.25, 66.  , 65.75, 65.5 , 65.25, 65.  , 64.75,\n",
       "       64.5 , 64.25, 64.  , 63.75, 63.5 , 63.25, 63.  , 62.75, 62.5 , 62.25,\n",
       "       62.  , 61.75, 61.5 , 61.25, 61.  , 60.75, 60.5 , 60.25, 60.  , 59.75,\n",
       "       59.5 , 59.25, 59.  , 58.75, 58.5 , 58.25, 58.  , 57.75, 57.5 , 57.25,\n",
       "       57.  , 56.75, 56.5 , 56.25, 56.  , 55.75, 55.5 , 55.25, 55.  , 54.75,\n",
       "       54.5 , 54.25, 54.  , 53.75, 53.5 , 53.25, 53.  , 52.75, 52.5 , 52.25,\n",
       "       52.  , 51.75, 51.5 , 51.25, 51.  , 50.75, 50.5 , 50.25, 50.  , 49.75,\n",
       "       49.5 , 49.25, 49.  , 48.75, 48.5 , 48.25, 48.  , 47.75, 47.5 , 47.25,\n",
       "       47.  , 46.75, 46.5 , 46.25, 46.  , 45.75, 45.5 , 45.25, 45.  , 44.75,\n",
       "       44.5 , 44.25, 44.  , 43.75, 43.5 , 43.25, 43.  , 42.75, 42.5 , 42.25,\n",
       "       42.  , 41.75, 41.5 , 41.25, 41.  , 40.75, 40.5 , 40.25, 40.  , 39.75,\n",
       "       39.5 , 39.25, 39.  , 38.75, 38.5 , 38.25, 38.  , 37.75, 37.5 , 37.25,\n",
       "       37.  , 36.75, 36.5 , 36.25, 36.  ])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>longitude</span></div><div class='xr-var-dims'>(longitude)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>-6.0 -5.75 -5.5 ... 16.5 16.75 17.0</div><input id='attrs-c7723f3f-caf1-4965-84bb-f03acb1d95a4' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-c7723f3f-caf1-4965-84bb-f03acb1d95a4' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-45e70434-2687-4714-809f-fc6d032aec11' class='xr-var-data-in' type='checkbox'><label for='data-45e70434-2687-4714-809f-fc6d032aec11' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>units :</span></dt><dd>degrees_east</dd><dt><span>standard_name :</span></dt><dd>longitude</dd><dt><span>long_name :</span></dt><dd>longitude</dd></dl></div><div class='xr-var-data'><pre>array([-6.  , -5.75, -5.5 , -5.25, -5.  , -4.75, -4.5 , -4.25, -4.  , -3.75,\n",
       "       -3.5 , -3.25, -3.  , -2.75, -2.5 , -2.25, -2.  , -1.75, -1.5 , -1.25,\n",
       "       -1.  , -0.75, -0.5 , -0.25,  0.  ,  0.25,  0.5 ,  0.75,  1.  ,  1.25,\n",
       "        1.5 ,  1.75,  2.  ,  2.25,  2.5 ,  2.75,  3.  ,  3.25,  3.5 ,  3.75,\n",
       "        4.  ,  4.25,  4.5 ,  4.75,  5.  ,  5.25,  5.5 ,  5.75,  6.  ,  6.25,\n",
       "        6.5 ,  6.75,  7.  ,  7.25,  7.5 ,  7.75,  8.  ,  8.25,  8.5 ,  8.75,\n",
       "        9.  ,  9.25,  9.5 ,  9.75, 10.  , 10.25, 10.5 , 10.75, 11.  , 11.25,\n",
       "       11.5 , 11.75, 12.  , 12.25, 12.5 , 12.75, 13.  , 13.25, 13.5 , 13.75,\n",
       "       14.  , 14.25, 14.5 , 14.75, 15.  , 15.25, 15.5 , 15.75, 16.  , 16.25,\n",
       "       16.5 , 16.75, 17.  ])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>valid_time</span></div><div class='xr-var-dims'>(time, step)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-3ab3c261-0f60-464d-ae56-f161bd8ca1a2' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-3ab3c261-0f60-464d-ae56-f161bd8ca1a2' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ab13a9b2-6f79-46c2-b586-068baba5f15a' class='xr-var-data-in' type='checkbox'><label for='data-ab13a9b2-6f79-46c2-b586-068baba5f15a' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>standard_name :</span></dt><dd>time</dd><dt><span>long_name :</span></dt><dd>time</dd></dl></div><div class='xr-var-data'><pre>[125 values with dtype=datetime64[ns]]</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-73a7e431-f08e-471e-acbe-c69a3f7b593b' class='xr-section-summary-in' type='checkbox'  checked><label for='section-73a7e431-f08e-471e-acbe-c69a3f7b593b' class='xr-section-summary' >Data variables: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>t2m</span></div><div class='xr-var-dims'>(number, time, step, surface, latitude, longitude)</div><div class='xr-var-dtype'>float32</div><div class='xr-var-preview xr-preview'>...</div><input id='attrs-d9e4f275-e56b-488f-b0dc-af4dd4aba831' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-d9e4f275-e56b-488f-b0dc-af4dd4aba831' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-0c70a99e-784e-4309-b9b9-cea2fcd1c6b8' class='xr-var-data-in' type='checkbox'><label for='data-0c70a99e-784e-4309-b9b9-cea2fcd1c6b8' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>GRIB_paramId :</span></dt><dd>167</dd><dt><span>GRIB_numberOfPoints :</span></dt><dd>11625</dd><dt><span>GRIB_typeOfLevel :</span></dt><dd>surface</dd><dt><span>GRIB_stepUnits :</span></dt><dd>1</dd><dt><span>GRIB_stepType :</span></dt><dd>instant</dd><dt><span>GRIB_gridType :</span></dt><dd>regular_ll</dd><dt><span>GRIB_NV :</span></dt><dd>0</dd><dt><span>GRIB_Nx :</span></dt><dd>93</dd><dt><span>GRIB_Ny :</span></dt><dd>125</dd><dt><span>GRIB_cfName :</span></dt><dd>unknown</dd><dt><span>GRIB_cfVarName :</span></dt><dd>t2m</dd><dt><span>GRIB_gridDefinitionDescription :</span></dt><dd>Latitude/Longitude Grid</dd><dt><span>GRIB_iDirectionIncrementInDegrees :</span></dt><dd>0.25</dd><dt><span>GRIB_iScansNegatively :</span></dt><dd>0</dd><dt><span>GRIB_jDirectionIncrementInDegrees :</span></dt><dd>0.25</dd><dt><span>GRIB_jPointsAreConsecutive :</span></dt><dd>0</dd><dt><span>GRIB_jScansPositively :</span></dt><dd>0</dd><dt><span>GRIB_latitudeOfFirstGridPointInDegrees :</span></dt><dd>67.0</dd><dt><span>GRIB_latitudeOfLastGridPointInDegrees :</span></dt><dd>36.0</dd><dt><span>GRIB_longitudeOfFirstGridPointInDegrees :</span></dt><dd>-6.0</dd><dt><span>GRIB_longitudeOfLastGridPointInDegrees :</span></dt><dd>17.0</dd><dt><span>GRIB_missingValue :</span></dt><dd>9999</dd><dt><span>GRIB_name :</span></dt><dd>2 metre temperature</dd><dt><span>GRIB_shortName :</span></dt><dd>2t</dd><dt><span>GRIB_totalNumber :</span></dt><dd>0</dd><dt><span>GRIB_units :</span></dt><dd>K</dd><dt><span>long_name :</span></dt><dd>2 metre temperature</dd><dt><span>units :</span></dt><dd>K</dd><dt><span>standard_name :</span></dt><dd>unknown</dd></dl></div><div class='xr-var-data'><pre>[1453125 values with dtype=float32]</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-7d83e689-61e6-4472-8fca-65d809e1833c' class='xr-section-summary-in' type='checkbox'  ><label for='section-7d83e689-61e6-4472-8fca-65d809e1833c' class='xr-section-summary' >Indexes: <span>(6)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>number</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-ab855759-b7ce-4b29-bade-e572954567d4' class='xr-index-data-in' type='checkbox'/><label for='index-ab855759-b7ce-4b29-bade-e572954567d4' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([0], dtype=&#x27;int64&#x27;, name=&#x27;number&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>time</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-03026029-2720-4aa5-b185-d8a73a250d61' class='xr-index-data-in' type='checkbox'/><label for='index-03026029-2720-4aa5-b185-d8a73a250d61' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2017-12-02&#x27;], dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;time&#x27;, freq=None))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>step</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-c1461350-6f7c-49f1-9398-da67d733826e' class='xr-index-data-in' type='checkbox'/><label for='index-c1461350-6f7c-49f1-9398-da67d733826e' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(TimedeltaIndex([ &#x27;0 days 00:00:00&#x27;,  &#x27;0 days 01:00:00&#x27;,  &#x27;0 days 02:00:00&#x27;,\n",
       "                 &#x27;0 days 03:00:00&#x27;,  &#x27;0 days 04:00:00&#x27;,  &#x27;0 days 05:00:00&#x27;,\n",
       "                 &#x27;0 days 06:00:00&#x27;,  &#x27;0 days 07:00:00&#x27;,  &#x27;0 days 08:00:00&#x27;,\n",
       "                 &#x27;0 days 09:00:00&#x27;,\n",
       "                ...\n",
       "                 &#x27;7 days 18:00:00&#x27;,  &#x27;8 days 00:00:00&#x27;,  &#x27;8 days 06:00:00&#x27;,\n",
       "                 &#x27;8 days 12:00:00&#x27;,  &#x27;8 days 18:00:00&#x27;,  &#x27;9 days 00:00:00&#x27;,\n",
       "                 &#x27;9 days 06:00:00&#x27;,  &#x27;9 days 12:00:00&#x27;,  &#x27;9 days 18:00:00&#x27;,\n",
       "                &#x27;10 days 00:00:00&#x27;],\n",
       "               dtype=&#x27;timedelta64[ns]&#x27;, name=&#x27;step&#x27;, length=125, freq=None))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>surface</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-f5d1e81f-8ab8-44b3-998e-f3d1c761f57c' class='xr-index-data-in' type='checkbox'/><label for='index-f5d1e81f-8ab8-44b3-998e-f3d1c761f57c' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([0.0], dtype=&#x27;float64&#x27;, name=&#x27;surface&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>latitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-c269f535-bb05-4b30-89b5-afb4e4ebbe0d' class='xr-index-data-in' type='checkbox'/><label for='index-c269f535-bb05-4b30-89b5-afb4e4ebbe0d' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([ 67.0, 66.75,  66.5, 66.25,  66.0, 65.75,  65.5, 65.25,  65.0, 64.75,\n",
       "       ...\n",
       "       38.25,  38.0, 37.75,  37.5, 37.25,  37.0, 36.75,  36.5, 36.25,  36.0],\n",
       "      dtype=&#x27;float64&#x27;, name=&#x27;latitude&#x27;, length=125))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>longitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-a0727a7a-eb14-474d-884f-37eb3de8f87d' class='xr-index-data-in' type='checkbox'/><label for='index-a0727a7a-eb14-474d-884f-37eb3de8f87d' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([ -6.0, -5.75,  -5.5, -5.25,  -5.0, -4.75,  -4.5, -4.25,  -4.0, -3.75,\n",
       "        -3.5, -3.25,  -3.0, -2.75,  -2.5, -2.25,  -2.0, -1.75,  -1.5, -1.25,\n",
       "        -1.0, -0.75,  -0.5, -0.25,   0.0,  0.25,   0.5,  0.75,   1.0,  1.25,\n",
       "         1.5,  1.75,   2.0,  2.25,   2.5,  2.75,   3.0,  3.25,   3.5,  3.75,\n",
       "         4.0,  4.25,   4.5,  4.75,   5.0,  5.25,   5.5,  5.75,   6.0,  6.25,\n",
       "         6.5,  6.75,   7.0,  7.25,   7.5,  7.75,   8.0,  8.25,   8.5,  8.75,\n",
       "         9.0,  9.25,   9.5,  9.75,  10.0, 10.25,  10.5, 10.75,  11.0, 11.25,\n",
       "        11.5, 11.75,  12.0, 12.25,  12.5, 12.75,  13.0, 13.25,  13.5, 13.75,\n",
       "        14.0, 14.25,  14.5, 14.75,  15.0, 15.25,  15.5, 15.75,  16.0, 16.25,\n",
       "        16.5, 16.75,  17.0],\n",
       "      dtype=&#x27;float64&#x27;, name=&#x27;longitude&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-01c1c140-c8bb-4886-99ab-f0028881ab95' class='xr-section-summary-in' type='checkbox'  checked><label for='section-01c1c140-c8bb-4886-99ab-f0028881ab95' class='xr-section-summary' >Attributes: <span>(7)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>GRIB_edition :</span></dt><dd>1</dd><dt><span>GRIB_centre :</span></dt><dd>ecmf</dd><dt><span>GRIB_centreDescription :</span></dt><dd>European Centre for Medium-Range Weather Forecasts</dd><dt><span>GRIB_subCentre :</span></dt><dd>0</dd><dt><span>Conventions :</span></dt><dd>CF-1.7</dd><dt><span>institution :</span></dt><dd>European Centre for Medium-Range Weather Forecasts</dd><dt><span>history :</span></dt><dd>2024-04-29T19:05 GRIB to CDM+CF via cfgrib-0.9.11.0/ecCodes-2.34.1 with {&quot;source&quot;: &quot;N/A&quot;, &quot;filter_by_keys&quot;: {}, &quot;encode_cf&quot;: [&quot;parameter&quot;, &quot;time&quot;, &quot;geography&quot;, &quot;vertical&quot;]}</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:     (number: 1, time: 1, step: 125, surface: 1, latitude: 125,\n",
       "                 longitude: 93)\n",
       "Coordinates:\n",
       "  * number      (number) int64 0\n",
       "  * time        (time) datetime64[ns] 2017-12-02\n",
       "  * step        (step) timedelta64[ns] 00:00:00 01:00:00 ... 10 days 00:00:00\n",
       "  * surface     (surface) float64 0.0\n",
       "  * latitude    (latitude) float64 67.0 66.75 66.5 66.25 ... 36.5 36.25 36.0\n",
       "  * longitude   (longitude) float64 -6.0 -5.75 -5.5 -5.25 ... 16.5 16.75 17.0\n",
       "    valid_time  (time, step) datetime64[ns] ...\n",
       "Data variables:\n",
       "    t2m         (number, time, step, surface, latitude, longitude) float32 ...\n",
       "Attributes:\n",
       "    GRIB_edition:            1\n",
       "    GRIB_centre:             ecmf\n",
       "    GRIB_centreDescription:  European Centre for Medium-Range Weather Forecasts\n",
       "    GRIB_subCentre:          0\n",
       "    Conventions:             CF-1.7\n",
       "    institution:             European Centre for Medium-Range Weather Forecasts\n",
       "    history:                 2024-04-29T19:05 GRIB to CDM+CF via cfgrib-0.9.1..."
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "4b539dde-d28b-4e43-8d8f-27c2c62760e3",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "By downloading data from this dataset, you agree to the terms and conditions defined at\n",
      "\n",
      "    https://github.com/Climdyn/climetlab-eumetnet-postprocessing-benchmark/blob/main/DATA_LICENSE\n",
      "\n",
      "If you do not agree with such terms, do not download the data. \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/yjess/anaconda3/lib/python3.11/site-packages/climetlab/sources/indexed_urls.py:46: UserWarning:\n",
      "\n",
      "Passing a PerUrlIndex object is obsolete, please update your code.\n",
      "\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PATTERN {url}data/fcs/{leveltype}/EU_forecast_{kind}_{leveltype}_params_{isodate}_0.grb\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "06f7b265278b4361a11e14a3cfa7cd46",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading index:   0%|          | 0.00/24.9M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "EU_forecast_hr_surf_params_2017-12_0.grb:   0%|          | 0.00/2.78M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "ds = cml.load_dataset('eumetnet-postprocessing-benchmark-training-data-gridded-forecasts-surface', \"2017-12-02\", \"2t\", \"highres\")\n",
    "fcs = ds.to_xarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "013ae5f0-7003-4bd8-b412-597dc144cae2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PATTERN {url}data/ana/{leveltype}/EU_analysis_{leveltype}_params_{isodate}.grb\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/home/yjess/anaconda3/lib/python3.11/site-packages/climetlab/sources/indexed_urls.py:46: UserWarning:\n",
      "\n",
      "Passing a PerUrlIndex object is obsolete, please update your code.\n",
      "\n"
     ]
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "b8ac41ae2ff74914b94c6c7933698f21",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "Downloading index:   0%|          | 0.00/4.47M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "application/vnd.jupyter.widget-view+json": {
       "model_id": "",
       "version_major": 2,
       "version_minor": 0
      },
      "text/plain": [
       "EU_analysis_surf_params_2017-12.grb:   0%|          | 0.00/5.88M [00:00<?, ?B/s]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "obs = ds.get_observations_as_xarray()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "b8c222b1-0bfd-482b-ae2a-1904b5461e72",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div><svg style=\"position: absolute; width: 0; height: 0; overflow: hidden\">\n",
       "<defs>\n",
       "<symbol id=\"icon-database\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M16 0c-8.837 0-16 2.239-16 5v4c0 2.761 7.163 5 16 5s16-2.239 16-5v-4c0-2.761-7.163-5-16-5z\"></path>\n",
       "<path d=\"M16 17c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "<path d=\"M16 26c-8.837 0-16-2.239-16-5v6c0 2.761 7.163 5 16 5s16-2.239 16-5v-6c0 2.761-7.163 5-16 5z\"></path>\n",
       "</symbol>\n",
       "<symbol id=\"icon-file-text2\" viewBox=\"0 0 32 32\">\n",
       "<path d=\"M28.681 7.159c-0.694-0.947-1.662-2.053-2.724-3.116s-2.169-2.030-3.116-2.724c-1.612-1.182-2.393-1.319-2.841-1.319h-15.5c-1.378 0-2.5 1.121-2.5 2.5v27c0 1.378 1.122 2.5 2.5 2.5h23c1.378 0 2.5-1.122 2.5-2.5v-19.5c0-0.448-0.137-1.23-1.319-2.841zM24.543 5.457c0.959 0.959 1.712 1.825 2.268 2.543h-4.811v-4.811c0.718 0.556 1.584 1.309 2.543 2.268zM28 29.5c0 0.271-0.229 0.5-0.5 0.5h-23c-0.271 0-0.5-0.229-0.5-0.5v-27c0-0.271 0.229-0.5 0.5-0.5 0 0 15.499-0 15.5 0v7c0 0.552 0.448 1 1 1h7v19.5z\"></path>\n",
       "<path d=\"M23 26h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 22h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "<path d=\"M23 18h-14c-0.552 0-1-0.448-1-1s0.448-1 1-1h14c0.552 0 1 0.448 1 1s-0.448 1-1 1z\"></path>\n",
       "</symbol>\n",
       "</defs>\n",
       "</svg>\n",
       "<style>/* CSS stylesheet for displaying xarray objects in jupyterlab.\n",
       " *\n",
       " */\n",
       "\n",
       ":root {\n",
       "  --xr-font-color0: var(--jp-content-font-color0, rgba(0, 0, 0, 1));\n",
       "  --xr-font-color2: var(--jp-content-font-color2, rgba(0, 0, 0, 0.54));\n",
       "  --xr-font-color3: var(--jp-content-font-color3, rgba(0, 0, 0, 0.38));\n",
       "  --xr-border-color: var(--jp-border-color2, #e0e0e0);\n",
       "  --xr-disabled-color: var(--jp-layout-color3, #bdbdbd);\n",
       "  --xr-background-color: var(--jp-layout-color0, white);\n",
       "  --xr-background-color-row-even: var(--jp-layout-color1, white);\n",
       "  --xr-background-color-row-odd: var(--jp-layout-color2, #eeeeee);\n",
       "}\n",
       "\n",
       "html[theme=dark],\n",
       "body[data-theme=dark],\n",
       "body.vscode-dark {\n",
       "  --xr-font-color0: rgba(255, 255, 255, 1);\n",
       "  --xr-font-color2: rgba(255, 255, 255, 0.54);\n",
       "  --xr-font-color3: rgba(255, 255, 255, 0.38);\n",
       "  --xr-border-color: #1F1F1F;\n",
       "  --xr-disabled-color: #515151;\n",
       "  --xr-background-color: #111111;\n",
       "  --xr-background-color-row-even: #111111;\n",
       "  --xr-background-color-row-odd: #313131;\n",
       "}\n",
       "\n",
       ".xr-wrap {\n",
       "  display: block !important;\n",
       "  min-width: 300px;\n",
       "  max-width: 700px;\n",
       "}\n",
       "\n",
       ".xr-text-repr-fallback {\n",
       "  /* fallback to plain text repr when CSS is not injected (untrusted notebook) */\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-header {\n",
       "  padding-top: 6px;\n",
       "  padding-bottom: 6px;\n",
       "  margin-bottom: 4px;\n",
       "  border-bottom: solid 1px var(--xr-border-color);\n",
       "}\n",
       "\n",
       ".xr-header > div,\n",
       ".xr-header > ul {\n",
       "  display: inline;\n",
       "  margin-top: 0;\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-obj-type,\n",
       ".xr-array-name {\n",
       "  margin-left: 2px;\n",
       "  margin-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-obj-type {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-sections {\n",
       "  padding-left: 0 !important;\n",
       "  display: grid;\n",
       "  grid-template-columns: 150px auto auto 1fr 20px 20px;\n",
       "}\n",
       "\n",
       ".xr-section-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-section-item input {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-item input + label {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label {\n",
       "  cursor: pointer;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-item input:enabled + label:hover {\n",
       "  color: var(--xr-font-color0);\n",
       "}\n",
       "\n",
       ".xr-section-summary {\n",
       "  grid-column: 1;\n",
       "  color: var(--xr-font-color2);\n",
       "  font-weight: 500;\n",
       "}\n",
       "\n",
       ".xr-section-summary > span {\n",
       "  display: inline-block;\n",
       "  padding-left: 0.5em;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label {\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in + label:before {\n",
       "  display: inline-block;\n",
       "  content: '►';\n",
       "  font-size: 11px;\n",
       "  width: 15px;\n",
       "  text-align: center;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:disabled + label:before {\n",
       "  color: var(--xr-disabled-color);\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label:before {\n",
       "  content: '▼';\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked + label > span {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-section-summary,\n",
       ".xr-section-inline-details {\n",
       "  padding-top: 4px;\n",
       "  padding-bottom: 4px;\n",
       "}\n",
       "\n",
       ".xr-section-inline-details {\n",
       "  grid-column: 2 / -1;\n",
       "}\n",
       "\n",
       ".xr-section-details {\n",
       "  display: none;\n",
       "  grid-column: 1 / -1;\n",
       "  margin-bottom: 5px;\n",
       "}\n",
       "\n",
       ".xr-section-summary-in:checked ~ .xr-section-details {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-array-wrap {\n",
       "  grid-column: 1 / -1;\n",
       "  display: grid;\n",
       "  grid-template-columns: 20px auto;\n",
       "}\n",
       "\n",
       ".xr-array-wrap > label {\n",
       "  grid-column: 1;\n",
       "  vertical-align: top;\n",
       "}\n",
       "\n",
       ".xr-preview {\n",
       "  color: var(--xr-font-color3);\n",
       "}\n",
       "\n",
       ".xr-array-preview,\n",
       ".xr-array-data {\n",
       "  padding: 0 5px !important;\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-array-data,\n",
       ".xr-array-in:checked ~ .xr-array-preview {\n",
       "  display: none;\n",
       "}\n",
       "\n",
       ".xr-array-in:checked ~ .xr-array-data,\n",
       ".xr-array-preview {\n",
       "  display: inline-block;\n",
       "}\n",
       "\n",
       ".xr-dim-list {\n",
       "  display: inline-block !important;\n",
       "  list-style: none;\n",
       "  padding: 0 !important;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list li {\n",
       "  display: inline-block;\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "}\n",
       "\n",
       ".xr-dim-list:before {\n",
       "  content: '(';\n",
       "}\n",
       "\n",
       ".xr-dim-list:after {\n",
       "  content: ')';\n",
       "}\n",
       "\n",
       ".xr-dim-list li:not(:last-child):after {\n",
       "  content: ',';\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-has-index {\n",
       "  font-weight: bold;\n",
       "}\n",
       "\n",
       ".xr-var-list,\n",
       ".xr-var-item {\n",
       "  display: contents;\n",
       "}\n",
       "\n",
       ".xr-var-item > div,\n",
       ".xr-var-item label,\n",
       ".xr-var-item > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-even);\n",
       "  margin-bottom: 0;\n",
       "}\n",
       "\n",
       ".xr-var-item > .xr-var-name:hover span {\n",
       "  padding-right: 5px;\n",
       "}\n",
       "\n",
       ".xr-var-list > li:nth-child(odd) > div,\n",
       ".xr-var-list > li:nth-child(odd) > label,\n",
       ".xr-var-list > li:nth-child(odd) > .xr-var-name span {\n",
       "  background-color: var(--xr-background-color-row-odd);\n",
       "}\n",
       "\n",
       ".xr-var-name {\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-var-dims {\n",
       "  grid-column: 2;\n",
       "}\n",
       "\n",
       ".xr-var-dtype {\n",
       "  grid-column: 3;\n",
       "  text-align: right;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-preview {\n",
       "  grid-column: 4;\n",
       "}\n",
       "\n",
       ".xr-index-preview {\n",
       "  grid-column: 2 / 5;\n",
       "  color: var(--xr-font-color2);\n",
       "}\n",
       "\n",
       ".xr-var-name,\n",
       ".xr-var-dims,\n",
       ".xr-var-dtype,\n",
       ".xr-preview,\n",
       ".xr-attrs dt {\n",
       "  white-space: nowrap;\n",
       "  overflow: hidden;\n",
       "  text-overflow: ellipsis;\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-var-name:hover,\n",
       ".xr-var-dims:hover,\n",
       ".xr-var-dtype:hover,\n",
       ".xr-attrs dt:hover {\n",
       "  overflow: visible;\n",
       "  width: auto;\n",
       "  z-index: 1;\n",
       "}\n",
       "\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  display: none;\n",
       "  background-color: var(--xr-background-color) !important;\n",
       "  padding-bottom: 5px !important;\n",
       "}\n",
       "\n",
       ".xr-var-attrs-in:checked ~ .xr-var-attrs,\n",
       ".xr-var-data-in:checked ~ .xr-var-data,\n",
       ".xr-index-data-in:checked ~ .xr-index-data {\n",
       "  display: block;\n",
       "}\n",
       "\n",
       ".xr-var-data > table {\n",
       "  float: right;\n",
       "}\n",
       "\n",
       ".xr-var-name span,\n",
       ".xr-var-data,\n",
       ".xr-index-name div,\n",
       ".xr-index-data,\n",
       ".xr-attrs {\n",
       "  padding-left: 25px !important;\n",
       "}\n",
       "\n",
       ".xr-attrs,\n",
       ".xr-var-attrs,\n",
       ".xr-var-data,\n",
       ".xr-index-data {\n",
       "  grid-column: 1 / -1;\n",
       "}\n",
       "\n",
       "dl.xr-attrs {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  display: grid;\n",
       "  grid-template-columns: 125px auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt,\n",
       ".xr-attrs dd {\n",
       "  padding: 0;\n",
       "  margin: 0;\n",
       "  float: left;\n",
       "  padding-right: 10px;\n",
       "  width: auto;\n",
       "}\n",
       "\n",
       ".xr-attrs dt {\n",
       "  font-weight: normal;\n",
       "  grid-column: 1;\n",
       "}\n",
       "\n",
       ".xr-attrs dt:hover span {\n",
       "  display: inline-block;\n",
       "  background: var(--xr-background-color);\n",
       "  padding-right: 10px;\n",
       "}\n",
       "\n",
       ".xr-attrs dd {\n",
       "  grid-column: 2;\n",
       "  white-space: pre-wrap;\n",
       "  word-break: break-all;\n",
       "}\n",
       "\n",
       ".xr-icon-database,\n",
       ".xr-icon-file-text2,\n",
       ".xr-no-icon {\n",
       "  display: inline-block;\n",
       "  vertical-align: middle;\n",
       "  width: 1em;\n",
       "  height: 1.5em !important;\n",
       "  stroke-width: 0;\n",
       "  stroke: currentColor;\n",
       "  fill: currentColor;\n",
       "}\n",
       "</style><pre class='xr-text-repr-fallback'>&lt;xarray.Dataset&gt;\n",
       "Dimensions:     (time: 1, step: 125, surface: 1, latitude: 125, longitude: 93,\n",
       "                 number: 1)\n",
       "Coordinates:\n",
       "  * time        (time) datetime64[ns] 2017-12-02\n",
       "  * step        (step) timedelta64[ns] 00:00:00 01:00:00 ... 10 days 00:00:00\n",
       "  * surface     (surface) float64 0.0\n",
       "  * latitude    (latitude) float64 67.0 66.75 66.5 66.25 ... 36.5 36.25 36.0\n",
       "  * longitude   (longitude) float64 -6.0 -5.75 -5.5 -5.25 ... 16.5 16.75 17.0\n",
       "  * number      (number) int64 0\n",
       "    valid_time  (time, step) datetime64[ns] 2017-12-02 ... 2017-12-12\n",
       "Data variables:\n",
       "    t2m         (number, time, step, surface, latitude, longitude) float64 27...\n",
       "Attributes:\n",
       "    GRIB_edition:            1\n",
       "    GRIB_centre:             ecmf\n",
       "    GRIB_centreDescription:  European Centre for Medium-Range Weather Forecasts\n",
       "    GRIB_subCentre:          0\n",
       "    Conventions:             CF-1.7\n",
       "    institution:             European Centre for Medium-Range Weather Forecasts\n",
       "    history:                 2024-04-29T19:06 GRIB to CDM+CF via cfgrib-0.9.1...</pre><div class='xr-wrap' style='display:none'><div class='xr-header'><div class='xr-obj-type'>xarray.Dataset</div></div><ul class='xr-sections'><li class='xr-section-item'><input id='section-650dc8f7-e292-42ed-9dce-238f8344ce5f' class='xr-section-summary-in' type='checkbox' disabled ><label for='section-650dc8f7-e292-42ed-9dce-238f8344ce5f' class='xr-section-summary'  title='Expand/collapse section'>Dimensions:</label><div class='xr-section-inline-details'><ul class='xr-dim-list'><li><span class='xr-has-index'>time</span>: 1</li><li><span class='xr-has-index'>step</span>: 125</li><li><span class='xr-has-index'>surface</span>: 1</li><li><span class='xr-has-index'>latitude</span>: 125</li><li><span class='xr-has-index'>longitude</span>: 93</li><li><span class='xr-has-index'>number</span>: 1</li></ul></div><div class='xr-section-details'></div></li><li class='xr-section-item'><input id='section-dfb484f5-085c-4cc8-8a7e-f6bec2ec9862' class='xr-section-summary-in' type='checkbox'  checked><label for='section-dfb484f5-085c-4cc8-8a7e-f6bec2ec9862' class='xr-section-summary' >Coordinates: <span>(7)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>time</span></div><div class='xr-var-dims'>(time)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2017-12-02</div><input id='attrs-9e2bb526-a00c-4bab-bda8-bc37e1f8c1cc' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-9e2bb526-a00c-4bab-bda8-bc37e1f8c1cc' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-b9841590-a1f1-42b4-a42c-4f1610941772' class='xr-var-data-in' type='checkbox'><label for='data-b9841590-a1f1-42b4-a42c-4f1610941772' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>initial time of forecast</dd><dt><span>standard_name :</span></dt><dd>forecast_reference_time</dd></dl></div><div class='xr-var-data'><pre>array([&#x27;2017-12-02T00:00:00.000000000&#x27;], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>step</span></div><div class='xr-var-dims'>(step)</div><div class='xr-var-dtype'>timedelta64[ns]</div><div class='xr-var-preview xr-preview'>00:00:00 ... 10 days 00:00:00</div><input id='attrs-98592463-f699-4fd0-8d8c-47956b5979f5' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-98592463-f699-4fd0-8d8c-47956b5979f5' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-8be60bff-b448-4a9a-aba0-3fc834766bbf' class='xr-var-data-in' type='checkbox'><label for='data-8be60bff-b448-4a9a-aba0-3fc834766bbf' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>time since forecast_reference_time</dd><dt><span>standard_name :</span></dt><dd>forecast_period</dd></dl></div><div class='xr-var-data'><pre>array([              0,   3600000000000,   7200000000000,  10800000000000,\n",
       "        14400000000000,  18000000000000,  21600000000000,  25200000000000,\n",
       "        28800000000000,  32400000000000,  36000000000000,  39600000000000,\n",
       "        43200000000000,  46800000000000,  50400000000000,  54000000000000,\n",
       "        57600000000000,  61200000000000,  64800000000000,  68400000000000,\n",
       "        72000000000000,  75600000000000,  79200000000000,  82800000000000,\n",
       "        86400000000000,  90000000000000,  93600000000000,  97200000000000,\n",
       "       100800000000000, 104400000000000, 108000000000000, 111600000000000,\n",
       "       115200000000000, 118800000000000, 122400000000000, 126000000000000,\n",
       "       129600000000000, 133200000000000, 136800000000000, 140400000000000,\n",
       "       144000000000000, 147600000000000, 151200000000000, 154800000000000,\n",
       "       158400000000000, 162000000000000, 165600000000000, 169200000000000,\n",
       "       172800000000000, 176400000000000, 180000000000000, 183600000000000,\n",
       "       187200000000000, 190800000000000, 194400000000000, 198000000000000,\n",
       "       201600000000000, 205200000000000, 208800000000000, 212400000000000,\n",
       "       216000000000000, 219600000000000, 223200000000000, 226800000000000,\n",
       "       230400000000000, 234000000000000, 237600000000000, 241200000000000,\n",
       "       244800000000000, 248400000000000, 252000000000000, 255600000000000,\n",
       "       259200000000000, 262800000000000, 266400000000000, 270000000000000,\n",
       "       273600000000000, 277200000000000, 280800000000000, 284400000000000,\n",
       "       288000000000000, 291600000000000, 295200000000000, 298800000000000,\n",
       "       302400000000000, 306000000000000, 309600000000000, 313200000000000,\n",
       "       316800000000000, 320400000000000, 324000000000000, 334800000000000,\n",
       "       345600000000000, 356400000000000, 367200000000000, 378000000000000,\n",
       "       388800000000000, 399600000000000, 410400000000000, 421200000000000,\n",
       "       432000000000000, 442800000000000, 453600000000000, 464400000000000,\n",
       "       475200000000000, 486000000000000, 496800000000000, 507600000000000,\n",
       "       518400000000000, 540000000000000, 561600000000000, 583200000000000,\n",
       "       604800000000000, 626400000000000, 648000000000000, 669600000000000,\n",
       "       691200000000000, 712800000000000, 734400000000000, 756000000000000,\n",
       "       777600000000000, 799200000000000, 820800000000000, 842400000000000,\n",
       "       864000000000000], dtype=&#x27;timedelta64[ns]&#x27;)</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>surface</span></div><div class='xr-var-dims'>(surface)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>0.0</div><input id='attrs-f2a57034-43b7-427e-865e-c43b72c52be1' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-f2a57034-43b7-427e-865e-c43b72c52be1' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-f7027b89-5d7f-459d-a180-a410f26e77f2' class='xr-var-data-in' type='checkbox'><label for='data-f7027b89-5d7f-459d-a180-a410f26e77f2' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>original GRIB coordinate for key: level(surface)</dd><dt><span>units :</span></dt><dd>1</dd></dl></div><div class='xr-var-data'><pre>array([0.])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>latitude</span></div><div class='xr-var-dims'>(latitude)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>67.0 66.75 66.5 ... 36.5 36.25 36.0</div><input id='attrs-aca474ef-151c-4c11-8b87-491604690cc8' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-aca474ef-151c-4c11-8b87-491604690cc8' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-7834ec9c-3922-474e-9fd4-97163dda886e' class='xr-var-data-in' type='checkbox'><label for='data-7834ec9c-3922-474e-9fd4-97163dda886e' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>units :</span></dt><dd>degrees_north</dd><dt><span>standard_name :</span></dt><dd>latitude</dd><dt><span>long_name :</span></dt><dd>latitude</dd><dt><span>stored_direction :</span></dt><dd>decreasing</dd></dl></div><div class='xr-var-data'><pre>array([67.  , 66.75, 66.5 , 66.25, 66.  , 65.75, 65.5 , 65.25, 65.  , 64.75,\n",
       "       64.5 , 64.25, 64.  , 63.75, 63.5 , 63.25, 63.  , 62.75, 62.5 , 62.25,\n",
       "       62.  , 61.75, 61.5 , 61.25, 61.  , 60.75, 60.5 , 60.25, 60.  , 59.75,\n",
       "       59.5 , 59.25, 59.  , 58.75, 58.5 , 58.25, 58.  , 57.75, 57.5 , 57.25,\n",
       "       57.  , 56.75, 56.5 , 56.25, 56.  , 55.75, 55.5 , 55.25, 55.  , 54.75,\n",
       "       54.5 , 54.25, 54.  , 53.75, 53.5 , 53.25, 53.  , 52.75, 52.5 , 52.25,\n",
       "       52.  , 51.75, 51.5 , 51.25, 51.  , 50.75, 50.5 , 50.25, 50.  , 49.75,\n",
       "       49.5 , 49.25, 49.  , 48.75, 48.5 , 48.25, 48.  , 47.75, 47.5 , 47.25,\n",
       "       47.  , 46.75, 46.5 , 46.25, 46.  , 45.75, 45.5 , 45.25, 45.  , 44.75,\n",
       "       44.5 , 44.25, 44.  , 43.75, 43.5 , 43.25, 43.  , 42.75, 42.5 , 42.25,\n",
       "       42.  , 41.75, 41.5 , 41.25, 41.  , 40.75, 40.5 , 40.25, 40.  , 39.75,\n",
       "       39.5 , 39.25, 39.  , 38.75, 38.5 , 38.25, 38.  , 37.75, 37.5 , 37.25,\n",
       "       37.  , 36.75, 36.5 , 36.25, 36.  ])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>longitude</span></div><div class='xr-var-dims'>(longitude)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>-6.0 -5.75 -5.5 ... 16.5 16.75 17.0</div><input id='attrs-42dae51d-5d69-4e47-a821-29f2ac7e94e1' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-42dae51d-5d69-4e47-a821-29f2ac7e94e1' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-9e0d9e58-f0cf-4f61-9571-4baea75f5fee' class='xr-var-data-in' type='checkbox'><label for='data-9e0d9e58-f0cf-4f61-9571-4baea75f5fee' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>units :</span></dt><dd>degrees_east</dd><dt><span>standard_name :</span></dt><dd>longitude</dd><dt><span>long_name :</span></dt><dd>longitude</dd></dl></div><div class='xr-var-data'><pre>array([-6.  , -5.75, -5.5 , -5.25, -5.  , -4.75, -4.5 , -4.25, -4.  , -3.75,\n",
       "       -3.5 , -3.25, -3.  , -2.75, -2.5 , -2.25, -2.  , -1.75, -1.5 , -1.25,\n",
       "       -1.  , -0.75, -0.5 , -0.25,  0.  ,  0.25,  0.5 ,  0.75,  1.  ,  1.25,\n",
       "        1.5 ,  1.75,  2.  ,  2.25,  2.5 ,  2.75,  3.  ,  3.25,  3.5 ,  3.75,\n",
       "        4.  ,  4.25,  4.5 ,  4.75,  5.  ,  5.25,  5.5 ,  5.75,  6.  ,  6.25,\n",
       "        6.5 ,  6.75,  7.  ,  7.25,  7.5 ,  7.75,  8.  ,  8.25,  8.5 ,  8.75,\n",
       "        9.  ,  9.25,  9.5 ,  9.75, 10.  , 10.25, 10.5 , 10.75, 11.  , 11.25,\n",
       "       11.5 , 11.75, 12.  , 12.25, 12.5 , 12.75, 13.  , 13.25, 13.5 , 13.75,\n",
       "       14.  , 14.25, 14.5 , 14.75, 15.  , 15.25, 15.5 , 15.75, 16.  , 16.25,\n",
       "       16.5 , 16.75, 17.  ])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span class='xr-has-index'>number</span></div><div class='xr-var-dims'>(number)</div><div class='xr-var-dtype'>int64</div><div class='xr-var-preview xr-preview'>0</div><input id='attrs-f3ac262e-002a-4108-ba3f-3539d26c9a24' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-f3ac262e-002a-4108-ba3f-3539d26c9a24' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-d1b1ccf9-7a1b-49a8-9ffe-f5ade6494715' class='xr-var-data-in' type='checkbox'><label for='data-d1b1ccf9-7a1b-49a8-9ffe-f5ade6494715' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>long_name :</span></dt><dd>ensemble member numerical id</dd><dt><span>units :</span></dt><dd>1</dd><dt><span>standard_name :</span></dt><dd>realization</dd></dl></div><div class='xr-var-data'><pre>array([0])</pre></div></li><li class='xr-var-item'><div class='xr-var-name'><span>valid_time</span></div><div class='xr-var-dims'>(time, step)</div><div class='xr-var-dtype'>datetime64[ns]</div><div class='xr-var-preview xr-preview'>2017-12-02 ... 2017-12-12</div><input id='attrs-97f36875-d617-4fbe-8609-df19fd2efe72' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-97f36875-d617-4fbe-8609-df19fd2efe72' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-41c505c9-8f6c-4801-94f2-fc872d79aaf1' class='xr-var-data-in' type='checkbox'><label for='data-41c505c9-8f6c-4801-94f2-fc872d79aaf1' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>standard_name :</span></dt><dd>time</dd><dt><span>long_name :</span></dt><dd>time</dd></dl></div><div class='xr-var-data'><pre>array([[&#x27;2017-12-02T00:00:00.000000000&#x27;, &#x27;2017-12-02T01:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-02T02:00:00.000000000&#x27;, &#x27;2017-12-02T03:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-02T04:00:00.000000000&#x27;, &#x27;2017-12-02T05:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-02T06:00:00.000000000&#x27;, &#x27;2017-12-02T07:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-02T08:00:00.000000000&#x27;, &#x27;2017-12-02T09:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-02T10:00:00.000000000&#x27;, &#x27;2017-12-02T11:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-02T12:00:00.000000000&#x27;, &#x27;2017-12-02T13:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-02T14:00:00.000000000&#x27;, &#x27;2017-12-02T15:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-02T16:00:00.000000000&#x27;, &#x27;2017-12-02T17:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-02T18:00:00.000000000&#x27;, &#x27;2017-12-02T19:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-02T20:00:00.000000000&#x27;, &#x27;2017-12-02T21:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-02T22:00:00.000000000&#x27;, &#x27;2017-12-02T23:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-03T00:00:00.000000000&#x27;, &#x27;2017-12-03T01:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-03T02:00:00.000000000&#x27;, &#x27;2017-12-03T03:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-03T04:00:00.000000000&#x27;, &#x27;2017-12-03T05:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-03T06:00:00.000000000&#x27;, &#x27;2017-12-03T07:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-03T08:00:00.000000000&#x27;, &#x27;2017-12-03T09:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-03T10:00:00.000000000&#x27;, &#x27;2017-12-03T11:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-03T12:00:00.000000000&#x27;, &#x27;2017-12-03T13:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-03T14:00:00.000000000&#x27;, &#x27;2017-12-03T15:00:00.000000000&#x27;,\n",
       "...\n",
       "        &#x27;2017-12-05T14:00:00.000000000&#x27;, &#x27;2017-12-05T15:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-05T16:00:00.000000000&#x27;, &#x27;2017-12-05T17:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-05T18:00:00.000000000&#x27;, &#x27;2017-12-05T21:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-06T00:00:00.000000000&#x27;, &#x27;2017-12-06T03:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-06T06:00:00.000000000&#x27;, &#x27;2017-12-06T09:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-06T12:00:00.000000000&#x27;, &#x27;2017-12-06T15:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-06T18:00:00.000000000&#x27;, &#x27;2017-12-06T21:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-07T00:00:00.000000000&#x27;, &#x27;2017-12-07T03:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-07T06:00:00.000000000&#x27;, &#x27;2017-12-07T09:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-07T12:00:00.000000000&#x27;, &#x27;2017-12-07T15:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-07T18:00:00.000000000&#x27;, &#x27;2017-12-07T21:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-08T00:00:00.000000000&#x27;, &#x27;2017-12-08T06:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-08T12:00:00.000000000&#x27;, &#x27;2017-12-08T18:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-09T00:00:00.000000000&#x27;, &#x27;2017-12-09T06:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-09T12:00:00.000000000&#x27;, &#x27;2017-12-09T18:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-10T00:00:00.000000000&#x27;, &#x27;2017-12-10T06:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-10T12:00:00.000000000&#x27;, &#x27;2017-12-10T18:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-11T00:00:00.000000000&#x27;, &#x27;2017-12-11T06:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-11T12:00:00.000000000&#x27;, &#x27;2017-12-11T18:00:00.000000000&#x27;,\n",
       "        &#x27;2017-12-12T00:00:00.000000000&#x27;]], dtype=&#x27;datetime64[ns]&#x27;)</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-2b0e741e-fdbd-4398-a2c5-bad3740e5766' class='xr-section-summary-in' type='checkbox'  checked><label for='section-2b0e741e-fdbd-4398-a2c5-bad3740e5766' class='xr-section-summary' >Data variables: <span>(1)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-var-name'><span>t2m</span></div><div class='xr-var-dims'>(number, time, step, surface, latitude, longitude)</div><div class='xr-var-dtype'>float64</div><div class='xr-var-preview xr-preview'>278.4 278.4 278.5 ... 290.5 290.5</div><input id='attrs-eae22058-2961-407f-8ad6-9d6bc43a32d4' class='xr-var-attrs-in' type='checkbox' ><label for='attrs-eae22058-2961-407f-8ad6-9d6bc43a32d4' title='Show/Hide attributes'><svg class='icon xr-icon-file-text2'><use xlink:href='#icon-file-text2'></use></svg></label><input id='data-ff8663a3-c90f-46c3-b58d-a86064a0d7b2' class='xr-var-data-in' type='checkbox'><label for='data-ff8663a3-c90f-46c3-b58d-a86064a0d7b2' title='Show/Hide data repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-var-attrs'><dl class='xr-attrs'><dt><span>GRIB_paramId :</span></dt><dd>167</dd><dt><span>GRIB_dataType :</span></dt><dd>an</dd><dt><span>GRIB_numberOfPoints :</span></dt><dd>11625</dd><dt><span>GRIB_typeOfLevel :</span></dt><dd>surface</dd><dt><span>GRIB_stepUnits :</span></dt><dd>1</dd><dt><span>GRIB_stepType :</span></dt><dd>instant</dd><dt><span>GRIB_gridType :</span></dt><dd>regular_ll</dd><dt><span>GRIB_NV :</span></dt><dd>0</dd><dt><span>GRIB_Nx :</span></dt><dd>93</dd><dt><span>GRIB_Ny :</span></dt><dd>125</dd><dt><span>GRIB_cfName :</span></dt><dd>unknown</dd><dt><span>GRIB_cfVarName :</span></dt><dd>t2m</dd><dt><span>GRIB_gridDefinitionDescription :</span></dt><dd>Latitude/Longitude Grid</dd><dt><span>GRIB_iDirectionIncrementInDegrees :</span></dt><dd>0.25</dd><dt><span>GRIB_iScansNegatively :</span></dt><dd>0</dd><dt><span>GRIB_jDirectionIncrementInDegrees :</span></dt><dd>0.25</dd><dt><span>GRIB_jPointsAreConsecutive :</span></dt><dd>0</dd><dt><span>GRIB_jScansPositively :</span></dt><dd>0</dd><dt><span>GRIB_latitudeOfFirstGridPointInDegrees :</span></dt><dd>67.0</dd><dt><span>GRIB_latitudeOfLastGridPointInDegrees :</span></dt><dd>36.0</dd><dt><span>GRIB_longitudeOfFirstGridPointInDegrees :</span></dt><dd>-6.0</dd><dt><span>GRIB_longitudeOfLastGridPointInDegrees :</span></dt><dd>17.0</dd><dt><span>GRIB_missingValue :</span></dt><dd>9999</dd><dt><span>GRIB_name :</span></dt><dd>2 metre temperature</dd><dt><span>GRIB_shortName :</span></dt><dd>2t</dd><dt><span>GRIB_totalNumber :</span></dt><dd>0</dd><dt><span>GRIB_units :</span></dt><dd>K</dd><dt><span>long_name :</span></dt><dd>2 metre temperature</dd><dt><span>units :</span></dt><dd>K</dd><dt><span>standard_name :</span></dt><dd>unknown</dd></dl></div><div class='xr-var-data'><pre>array([[[[[[278.36410522, 278.43637085, 278.50668335, ...,\n",
       "            267.94613647, 266.99301147, 266.16293335],\n",
       "           [278.30160522, 278.39926147, 278.49887085, ...,\n",
       "            266.94418335, 265.89926147, 264.88949585],\n",
       "           [278.2449646 , 278.32504272, 278.40316772, ...,\n",
       "            267.7840271 , 267.54574585, 266.72543335],\n",
       "           ...,\n",
       "           [280.84457397, 279.17074585, 278.6434021 , ...,\n",
       "            289.33676147, 289.45394897, 289.63754272],\n",
       "           [283.97348022, 281.73519897, 282.74301147, ...,\n",
       "            289.68637085, 289.80551147, 289.99887085],\n",
       "           [286.68832397, 283.43637085, 284.4480896 , ...,\n",
       "            289.8699646 , 290.03793335, 290.2215271 ]]],\n",
       "\n",
       "\n",
       "         [[[278.28063965, 278.36071777, 278.4407959 , ...,\n",
       "            268.36462402, 267.49743652, 266.65563965],\n",
       "           [278.2454834 , 278.34899902, 278.45446777, ...,\n",
       "            267.30603027, 266.34899902, 265.3626709 ],\n",
       "           [278.23571777, 278.31384277, 278.39001465, ...,\n",
       "...\n",
       "            290.5617981 , 290.44265747, 290.17703247],\n",
       "           [287.13796997, 285.41726685, 285.29031372, ...,\n",
       "            290.56375122, 290.4446106 , 290.22390747],\n",
       "           [287.95632935, 286.87039185, 286.74343872, ...,\n",
       "            290.5227356 , 290.46414185, 290.25515747]]],\n",
       "\n",
       "\n",
       "         [[[276.06201172, 276.14794922, 276.23193359, ...,\n",
       "            265.14208984, 265.40771484, 265.31201172],\n",
       "           [275.89599609, 276.03857422, 276.18701172, ...,\n",
       "            265.89599609, 266.21435547, 266.52294922],\n",
       "           [275.62451172, 275.77880859, 275.93310547, ...,\n",
       "            267.04052734, 267.59130859, 267.76904297],\n",
       "           ...,\n",
       "           [282.84130859, 281.77490234, 280.61865234, ...,\n",
       "            290.38037109, 290.43896484, 290.33544922],\n",
       "           [284.82373047, 283.59521484, 283.98974609, ...,\n",
       "            290.34912109, 290.40966797, 290.39208984],\n",
       "           [286.35107422, 284.60693359, 285.00341797, ...,\n",
       "            290.36474609, 290.45068359, 290.49755859]]]]]])</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-267b8c36-3786-479d-8f5c-b2ba362d84a2' class='xr-section-summary-in' type='checkbox'  ><label for='section-267b8c36-3786-479d-8f5c-b2ba362d84a2' class='xr-section-summary' >Indexes: <span>(6)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><ul class='xr-var-list'><li class='xr-var-item'><div class='xr-index-name'><div>time</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-d55779ef-fabe-4dbb-a0b3-c20891760dea' class='xr-index-data-in' type='checkbox'/><label for='index-d55779ef-fabe-4dbb-a0b3-c20891760dea' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(DatetimeIndex([&#x27;2017-12-02&#x27;], dtype=&#x27;datetime64[ns]&#x27;, name=&#x27;time&#x27;, freq=None))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>step</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-fc7b37f3-d5aa-4343-9df7-ca15eb11127c' class='xr-index-data-in' type='checkbox'/><label for='index-fc7b37f3-d5aa-4343-9df7-ca15eb11127c' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(TimedeltaIndex([ &#x27;0 days 00:00:00&#x27;,  &#x27;0 days 01:00:00&#x27;,  &#x27;0 days 02:00:00&#x27;,\n",
       "                 &#x27;0 days 03:00:00&#x27;,  &#x27;0 days 04:00:00&#x27;,  &#x27;0 days 05:00:00&#x27;,\n",
       "                 &#x27;0 days 06:00:00&#x27;,  &#x27;0 days 07:00:00&#x27;,  &#x27;0 days 08:00:00&#x27;,\n",
       "                 &#x27;0 days 09:00:00&#x27;,\n",
       "                ...\n",
       "                 &#x27;7 days 18:00:00&#x27;,  &#x27;8 days 00:00:00&#x27;,  &#x27;8 days 06:00:00&#x27;,\n",
       "                 &#x27;8 days 12:00:00&#x27;,  &#x27;8 days 18:00:00&#x27;,  &#x27;9 days 00:00:00&#x27;,\n",
       "                 &#x27;9 days 06:00:00&#x27;,  &#x27;9 days 12:00:00&#x27;,  &#x27;9 days 18:00:00&#x27;,\n",
       "                &#x27;10 days 00:00:00&#x27;],\n",
       "               dtype=&#x27;timedelta64[ns]&#x27;, name=&#x27;step&#x27;, length=125, freq=None))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>surface</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-8e53536b-a634-4057-a85f-13f9114cb2e9' class='xr-index-data-in' type='checkbox'/><label for='index-8e53536b-a634-4057-a85f-13f9114cb2e9' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([0.0], dtype=&#x27;float64&#x27;, name=&#x27;surface&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>latitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-f2de9343-d9be-4517-8e7e-fb9486eebfda' class='xr-index-data-in' type='checkbox'/><label for='index-f2de9343-d9be-4517-8e7e-fb9486eebfda' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([ 67.0, 66.75,  66.5, 66.25,  66.0, 65.75,  65.5, 65.25,  65.0, 64.75,\n",
       "       ...\n",
       "       38.25,  38.0, 37.75,  37.5, 37.25,  37.0, 36.75,  36.5, 36.25,  36.0],\n",
       "      dtype=&#x27;float64&#x27;, name=&#x27;latitude&#x27;, length=125))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>longitude</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-33721dbb-6c4b-4556-a4ed-a83714d74353' class='xr-index-data-in' type='checkbox'/><label for='index-33721dbb-6c4b-4556-a4ed-a83714d74353' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([ -6.0, -5.75,  -5.5, -5.25,  -5.0, -4.75,  -4.5, -4.25,  -4.0, -3.75,\n",
       "        -3.5, -3.25,  -3.0, -2.75,  -2.5, -2.25,  -2.0, -1.75,  -1.5, -1.25,\n",
       "        -1.0, -0.75,  -0.5, -0.25,   0.0,  0.25,   0.5,  0.75,   1.0,  1.25,\n",
       "         1.5,  1.75,   2.0,  2.25,   2.5,  2.75,   3.0,  3.25,   3.5,  3.75,\n",
       "         4.0,  4.25,   4.5,  4.75,   5.0,  5.25,   5.5,  5.75,   6.0,  6.25,\n",
       "         6.5,  6.75,   7.0,  7.25,   7.5,  7.75,   8.0,  8.25,   8.5,  8.75,\n",
       "         9.0,  9.25,   9.5,  9.75,  10.0, 10.25,  10.5, 10.75,  11.0, 11.25,\n",
       "        11.5, 11.75,  12.0, 12.25,  12.5, 12.75,  13.0, 13.25,  13.5, 13.75,\n",
       "        14.0, 14.25,  14.5, 14.75,  15.0, 15.25,  15.5, 15.75,  16.0, 16.25,\n",
       "        16.5, 16.75,  17.0],\n",
       "      dtype=&#x27;float64&#x27;, name=&#x27;longitude&#x27;))</pre></div></li><li class='xr-var-item'><div class='xr-index-name'><div>number</div></div><div class='xr-index-preview'>PandasIndex</div><div></div><input id='index-92e7e477-fd1c-4dbb-ac1f-ebfe64d99f46' class='xr-index-data-in' type='checkbox'/><label for='index-92e7e477-fd1c-4dbb-ac1f-ebfe64d99f46' title='Show/Hide index repr'><svg class='icon xr-icon-database'><use xlink:href='#icon-database'></use></svg></label><div class='xr-index-data'><pre>PandasIndex(Index([0], dtype=&#x27;int64&#x27;, name=&#x27;number&#x27;))</pre></div></li></ul></div></li><li class='xr-section-item'><input id='section-1c98ac53-9bcf-41e9-aaab-2461a8e25d7e' class='xr-section-summary-in' type='checkbox'  checked><label for='section-1c98ac53-9bcf-41e9-aaab-2461a8e25d7e' class='xr-section-summary' >Attributes: <span>(7)</span></label><div class='xr-section-inline-details'></div><div class='xr-section-details'><dl class='xr-attrs'><dt><span>GRIB_edition :</span></dt><dd>1</dd><dt><span>GRIB_centre :</span></dt><dd>ecmf</dd><dt><span>GRIB_centreDescription :</span></dt><dd>European Centre for Medium-Range Weather Forecasts</dd><dt><span>GRIB_subCentre :</span></dt><dd>0</dd><dt><span>Conventions :</span></dt><dd>CF-1.7</dd><dt><span>institution :</span></dt><dd>European Centre for Medium-Range Weather Forecasts</dd><dt><span>history :</span></dt><dd>2024-04-29T19:06 GRIB to CDM+CF via cfgrib-0.9.11.0/ecCodes-2.34.1 with {&quot;source&quot;: &quot;N/A&quot;, &quot;filter_by_keys&quot;: {}, &quot;encode_cf&quot;: [&quot;parameter&quot;, &quot;time&quot;, &quot;geography&quot;, &quot;vertical&quot;]}</dd></dl></div></li></ul></div></div>"
      ],
      "text/plain": [
       "<xarray.Dataset>\n",
       "Dimensions:     (time: 1, step: 125, surface: 1, latitude: 125, longitude: 93,\n",
       "                 number: 1)\n",
       "Coordinates:\n",
       "  * time        (time) datetime64[ns] 2017-12-02\n",
       "  * step        (step) timedelta64[ns] 00:00:00 01:00:00 ... 10 days 00:00:00\n",
       "  * surface     (surface) float64 0.0\n",
       "  * latitude    (latitude) float64 67.0 66.75 66.5 66.25 ... 36.5 36.25 36.0\n",
       "  * longitude   (longitude) float64 -6.0 -5.75 -5.5 -5.25 ... 16.5 16.75 17.0\n",
       "  * number      (number) int64 0\n",
       "    valid_time  (time, step) datetime64[ns] 2017-12-02 ... 2017-12-12\n",
       "Data variables:\n",
       "    t2m         (number, time, step, surface, latitude, longitude) float64 27...\n",
       "Attributes:\n",
       "    GRIB_edition:            1\n",
       "    GRIB_centre:             ecmf\n",
       "    GRIB_centreDescription:  European Centre for Medium-Range Weather Forecasts\n",
       "    GRIB_subCentre:          0\n",
       "    Conventions:             CF-1.7\n",
       "    institution:             European Centre for Medium-Range Weather Forecasts\n",
       "    history:                 2024-04-29T19:06 GRIB to CDM+CF via cfgrib-0.9.1..."
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "obs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "3fb457c6-8c26-45b0-b456-e2483dee0aab",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "28d0b429-032b-43df-8662-4eb02d6130b6",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "508cad0f-f6ad-425c-9dad-2c1b634540a3",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "from sklearn.linear_model import LinearRegression\n",
    "from sklearn.metrics import mean_squared_error\n",
    "import math\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "7c0215e6-0f37-40bb-ad69-f2c3e4b89829",
   "metadata": {},
   "outputs": [],
   "source": [
    "def generate_ensemble_predictions(model, input_data):\n",
    "    # Enable dropout at inference time (Monte Carlo Dropout)\n",
    "    predictions = np.array([model.predict(input_data, training=True) for _ in range(100)])\n",
    "    ensemble_mean = predictions.mean(axis=0)\n",
    "    ensemble_std = predictions.std(axis=0)\n",
    "    return ensemble_mean.flatten(), ensemble_std.flatten()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "08f09f72-c958-4382-a85f-5c63d8d74446",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "60b68c69-70c9-4ae3-9865-cba8c2096876",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'ensemble_mean' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[69], line 9\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01msklearn\u001b[39;00m\u001b[38;5;21;01m.\u001b[39;00m\u001b[38;5;21;01mlinear_model\u001b[39;00m \u001b[38;5;28;01mimport\u001b[39;00m LinearRegression\n\u001b[1;32m      4\u001b[0m \u001b[38;5;66;03m# Assuming 'days' is an array of day-of-year values corresponding to the forecasts\u001b[39;00m\n\u001b[1;32m      5\u001b[0m X_mu \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mcolumn_stack([\n\u001b[1;32m      6\u001b[0m     np\u001b[38;5;241m.\u001b[39mones(\u001b[38;5;28mlen\u001b[39m(days)),  \u001b[38;5;66;03m# Intercept\u001b[39;00m\n\u001b[1;32m      7\u001b[0m     np\u001b[38;5;241m.\u001b[39msin(\u001b[38;5;241m2\u001b[39m \u001b[38;5;241m*\u001b[39m np\u001b[38;5;241m.\u001b[39mpi \u001b[38;5;241m*\u001b[39m days \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m365\u001b[39m),  \u001b[38;5;66;03m# Seasonal functions for DOY\u001b[39;00m\n\u001b[1;32m      8\u001b[0m     np\u001b[38;5;241m.\u001b[39mcos(\u001b[38;5;241m2\u001b[39m \u001b[38;5;241m*\u001b[39m np\u001b[38;5;241m.\u001b[39mpi \u001b[38;5;241m*\u001b[39m days \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m365\u001b[39m),\n\u001b[0;32m----> 9\u001b[0m     ensemble_mean  \u001b[38;5;66;03m# from generate_ensemble_predictions\u001b[39;00m\n\u001b[1;32m     10\u001b[0m ])\n\u001b[1;32m     12\u001b[0m X_sigma \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39mcolumn_stack([\n\u001b[1;32m     13\u001b[0m     np\u001b[38;5;241m.\u001b[39mones(\u001b[38;5;28mlen\u001b[39m(days)),  \u001b[38;5;66;03m# Intercept\u001b[39;00m\n\u001b[1;32m     14\u001b[0m     np\u001b[38;5;241m.\u001b[39msin(\u001b[38;5;241m2\u001b[39m \u001b[38;5;241m*\u001b[39m np\u001b[38;5;241m.\u001b[39mpi \u001b[38;5;241m*\u001b[39m days \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m365\u001b[39m),  \u001b[38;5;66;03m# Seasonal functions for DOY\u001b[39;00m\n\u001b[1;32m     15\u001b[0m     np\u001b[38;5;241m.\u001b[39mcos(\u001b[38;5;241m2\u001b[39m \u001b[38;5;241m*\u001b[39m np\u001b[38;5;241m.\u001b[39mpi \u001b[38;5;241m*\u001b[39m days \u001b[38;5;241m/\u001b[39m \u001b[38;5;241m365\u001b[39m),\n\u001b[1;32m     16\u001b[0m     np\u001b[38;5;241m.\u001b[39mlog(ensemble_std)  \u001b[38;5;66;03m# Log of ensemble standard deviations\u001b[39;00m\n\u001b[1;32m     17\u001b[0m ])\n\u001b[1;32m     19\u001b[0m \u001b[38;5;66;03m# Fit regression models\u001b[39;00m\n",
      "\u001b[0;31mNameError\u001b[0m: name 'ensemble_mean' is not defined"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "# Assuming 'days' is an array of day-of-year values corresponding to the forecasts\n",
    "X_mu = np.column_stack([\n",
    "    np.ones(len(days)),  # Intercept\n",
    "    np.sin(2 * np.pi * days / 365),  # Seasonal functions for DOY\n",
    "    np.cos(2 * np.pi * days / 365),\n",
    "    ensemble_mean  # from generate_ensemble_predictions\n",
    "])\n",
    "\n",
    "X_sigma = np.column_stack([\n",
    "    np.ones(len(days)),  # Intercept\n",
    "    np.sin(2 * np.pi * days / 365),  # Seasonal functions for DOY\n",
    "    np.cos(2 * np.pi * days / 365),\n",
    "    np.log(ensemble_std)  # Log of ensemble standard deviations\n",
    "])\n",
    "\n",
    "# Fit regression models\n",
    "model_mu = LinearRegression().fit(X_mu, actual_temperatures)\n",
    "model_sigma = LinearRegression().fit(X_sigma, np.log(ensemble_std))  # Assuming std dev is available\n",
    "\n",
    "# Predict adjusted μ and σ\n",
    "adjusted_mu = model_mu.predict(X_mu)\n",
    "adjusted_sigma = np.exp(model_sigma.predict(X_sigma))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "75126713-9676-4d77-bea9-32275f75734d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(10, 5))\n",
    "plt.plot(actual_temperatures, label='Actual')\n",
    "plt.plot(adjusted_mu, label='EMOS Adjusted Forecast', color='red')\n",
    "plt.fill_between(range(len(adjusted_mu)), adjusted_mu - 1.96 * adjusted_sigma, adjusted_mu + 1.96 * adjusted_sigma, color='red', alpha=0.3)\n",
    "plt.legend()\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "15129fe2-0c97-4c8e-84a2-48fbe153e37e",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "35c173ca-a3f1-4b1c-aebd-5dbcffe51603",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "id": "51995d70-6b85-4f9b-9fd2-239f88cb4786",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mu coefficients: [ 0.         -0.203804   -0.15900375  0.19971353 -0.21970924  1.02800792]\n",
      "Sigma coefficients: [ 0.          0.00121097 -0.01989506 -0.12524565  0.13854328 -0.0162542 ]\n"
     ]
    }
   ],
   "source": [
    "\n",
    "# Sample data\n",
    "np.random.seed(0)\n",
    "days = np.array(range(365))  # Day of the year for one year\n",
    "mu_ens = np.random.normal(20, 5, 365)  # Simulated ensemble mean predictions\n",
    "sigma_ens = np.random.normal(2, 0.5, 365)  # Simulated ensemble standard deviations\n",
    "temps_actual = mu_ens + np.random.normal(0, sigma_ens)  # Simulated actual temperatures\n",
    "\n",
    "# Features for EMOS\n",
    "X = np.column_stack([\n",
    "    np.ones(len(days)),  # Intercept\n",
    "    np.sin(2 * np.pi * days / 365),\n",
    "    np.cos(2 * np.pi * days / 365),\n",
    "    np.sin(4 * np.pi * days / 365),\n",
    "    np.cos(4 * np.pi * days / 365),\n",
    "    mu_ens  # Using ensemble mean as a feature\n",
    "])\n",
    "\n",
    "# Linear model for μ\n",
    "model_mu = LinearRegression().fit(X, temps_actual)\n",
    "\n",
    "# Predicting μ\n",
    "mu_pred = model_mu.predict(X)\n",
    "\n",
    "# Linear model for log(σ)\n",
    "log_sigma = np.log(np.abs(temps_actual - mu_pred))  # Approximation of σ\n",
    "model_sigma = LinearRegression().fit(X, log_sigma)\n",
    "sigma_pred = np.exp(model_sigma.predict(X))\n",
    "\n",
    "# Printing models' coefficients\n",
    "print(\"Mu coefficients:\", model_mu.coef_)\n",
    "print(\"Sigma coefficients:\", model_sigma.coef_)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "6cce0cfb-fd03-4d5c-884c-b8a7f66cb219",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
